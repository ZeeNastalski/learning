// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player/PlayerTrackingData.proto

#ifndef PROTOBUF_INCLUDED_player_2fPlayerTrackingData_2eproto
#define PROTOBUF_INCLUDED_player_2fPlayerTrackingData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Vector3.pb.h"
#include "Quaternion.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_player_2fPlayerTrackingData_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_player_2fPlayerTrackingData_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_player_2fPlayerTrackingData_2eproto();
namespace zl {
namespace proto {
namespace player {
class PlayerTrackingData;
class PlayerTrackingDataDefaultTypeInternal;
extern PlayerTrackingDataDefaultTypeInternal _PlayerTrackingData_default_instance_;
}  // namespace player
}  // namespace proto
}  // namespace zl
namespace google {
namespace protobuf {
template<> ::zl::proto::player::PlayerTrackingData* Arena::CreateMaybeMessage<::zl::proto::player::PlayerTrackingData>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace zl {
namespace proto {
namespace player {

// ===================================================================

class PlayerTrackingData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zl.proto.player.PlayerTrackingData) */ {
 public:
  PlayerTrackingData();
  virtual ~PlayerTrackingData();

  PlayerTrackingData(const PlayerTrackingData& from);

  inline PlayerTrackingData& operator=(const PlayerTrackingData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerTrackingData(PlayerTrackingData&& from) noexcept
    : PlayerTrackingData() {
    *this = ::std::move(from);
  }

  inline PlayerTrackingData& operator=(PlayerTrackingData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PlayerTrackingData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerTrackingData* internal_default_instance() {
    return reinterpret_cast<const PlayerTrackingData*>(
               &_PlayerTrackingData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PlayerTrackingData* other);
  friend void swap(PlayerTrackingData& a, PlayerTrackingData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerTrackingData* New() const final {
    return CreateMaybeMessage<PlayerTrackingData>(nullptr);
  }

  PlayerTrackingData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerTrackingData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerTrackingData& from);
  void MergeFrom(const PlayerTrackingData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerTrackingData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 TrackedControllers = 5;
  int trackedcontrollers_size() const;
  void clear_trackedcontrollers();
  static const int kTrackedControllersFieldNumber = 5;
  ::google::protobuf::int32 trackedcontrollers(int index) const;
  void set_trackedcontrollers(int index, ::google::protobuf::int32 value);
  void add_trackedcontrollers(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      trackedcontrollers() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_trackedcontrollers();

  // .zl.proto.Vector3 TrackingHeadPosition = 1;
  bool has_trackingheadposition() const;
  void clear_trackingheadposition();
  static const int kTrackingHeadPositionFieldNumber = 1;
  const ::zl::proto::Vector3& trackingheadposition() const;
  ::zl::proto::Vector3* release_trackingheadposition();
  ::zl::proto::Vector3* mutable_trackingheadposition();
  void set_allocated_trackingheadposition(::zl::proto::Vector3* trackingheadposition);

  // .zl.proto.Quaternion TrackingHeadOrientation = 2;
  bool has_trackingheadorientation() const;
  void clear_trackingheadorientation();
  static const int kTrackingHeadOrientationFieldNumber = 2;
  const ::zl::proto::Quaternion& trackingheadorientation() const;
  ::zl::proto::Quaternion* release_trackingheadorientation();
  ::zl::proto::Quaternion* mutable_trackingheadorientation();
  void set_allocated_trackingheadorientation(::zl::proto::Quaternion* trackingheadorientation);

  // .zl.proto.Vector3 ArenaHeadPosition = 3;
  bool has_arenaheadposition() const;
  void clear_arenaheadposition();
  static const int kArenaHeadPositionFieldNumber = 3;
  const ::zl::proto::Vector3& arenaheadposition() const;
  ::zl::proto::Vector3* release_arenaheadposition();
  ::zl::proto::Vector3* mutable_arenaheadposition();
  void set_allocated_arenaheadposition(::zl::proto::Vector3* arenaheadposition);

  // .zl.proto.Quaternion ArenaHeadOrientation = 4;
  bool has_arenaheadorientation() const;
  void clear_arenaheadorientation();
  static const int kArenaHeadOrientationFieldNumber = 4;
  const ::zl::proto::Quaternion& arenaheadorientation() const;
  ::zl::proto::Quaternion* release_arenaheadorientation();
  ::zl::proto::Quaternion* mutable_arenaheadorientation();
  void set_allocated_arenaheadorientation(::zl::proto::Quaternion* arenaheadorientation);

  // @@protoc_insertion_point(class_scope:zl.proto.player.PlayerTrackingData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > trackedcontrollers_;
  mutable std::atomic<int> _trackedcontrollers_cached_byte_size_;
  ::zl::proto::Vector3* trackingheadposition_;
  ::zl::proto::Quaternion* trackingheadorientation_;
  ::zl::proto::Vector3* arenaheadposition_;
  ::zl::proto::Quaternion* arenaheadorientation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_2fPlayerTrackingData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayerTrackingData

// .zl.proto.Vector3 TrackingHeadPosition = 1;
inline bool PlayerTrackingData::has_trackingheadposition() const {
  return this != internal_default_instance() && trackingheadposition_ != nullptr;
}
inline const ::zl::proto::Vector3& PlayerTrackingData::trackingheadposition() const {
  const ::zl::proto::Vector3* p = trackingheadposition_;
  // @@protoc_insertion_point(field_get:zl.proto.player.PlayerTrackingData.TrackingHeadPosition)
  return p != nullptr ? *p : *reinterpret_cast<const ::zl::proto::Vector3*>(
      &::zl::proto::_Vector3_default_instance_);
}
inline ::zl::proto::Vector3* PlayerTrackingData::release_trackingheadposition() {
  // @@protoc_insertion_point(field_release:zl.proto.player.PlayerTrackingData.TrackingHeadPosition)
  
  ::zl::proto::Vector3* temp = trackingheadposition_;
  trackingheadposition_ = nullptr;
  return temp;
}
inline ::zl::proto::Vector3* PlayerTrackingData::mutable_trackingheadposition() {
  
  if (trackingheadposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::zl::proto::Vector3>(GetArenaNoVirtual());
    trackingheadposition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zl.proto.player.PlayerTrackingData.TrackingHeadPosition)
  return trackingheadposition_;
}
inline void PlayerTrackingData::set_allocated_trackingheadposition(::zl::proto::Vector3* trackingheadposition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(trackingheadposition_);
  }
  if (trackingheadposition) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trackingheadposition = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, trackingheadposition, submessage_arena);
    }
    
  } else {
    
  }
  trackingheadposition_ = trackingheadposition;
  // @@protoc_insertion_point(field_set_allocated:zl.proto.player.PlayerTrackingData.TrackingHeadPosition)
}

// .zl.proto.Quaternion TrackingHeadOrientation = 2;
inline bool PlayerTrackingData::has_trackingheadorientation() const {
  return this != internal_default_instance() && trackingheadorientation_ != nullptr;
}
inline const ::zl::proto::Quaternion& PlayerTrackingData::trackingheadorientation() const {
  const ::zl::proto::Quaternion* p = trackingheadorientation_;
  // @@protoc_insertion_point(field_get:zl.proto.player.PlayerTrackingData.TrackingHeadOrientation)
  return p != nullptr ? *p : *reinterpret_cast<const ::zl::proto::Quaternion*>(
      &::zl::proto::_Quaternion_default_instance_);
}
inline ::zl::proto::Quaternion* PlayerTrackingData::release_trackingheadorientation() {
  // @@protoc_insertion_point(field_release:zl.proto.player.PlayerTrackingData.TrackingHeadOrientation)
  
  ::zl::proto::Quaternion* temp = trackingheadorientation_;
  trackingheadorientation_ = nullptr;
  return temp;
}
inline ::zl::proto::Quaternion* PlayerTrackingData::mutable_trackingheadorientation() {
  
  if (trackingheadorientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::zl::proto::Quaternion>(GetArenaNoVirtual());
    trackingheadorientation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zl.proto.player.PlayerTrackingData.TrackingHeadOrientation)
  return trackingheadorientation_;
}
inline void PlayerTrackingData::set_allocated_trackingheadorientation(::zl::proto::Quaternion* trackingheadorientation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(trackingheadorientation_);
  }
  if (trackingheadorientation) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trackingheadorientation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, trackingheadorientation, submessage_arena);
    }
    
  } else {
    
  }
  trackingheadorientation_ = trackingheadorientation;
  // @@protoc_insertion_point(field_set_allocated:zl.proto.player.PlayerTrackingData.TrackingHeadOrientation)
}

// .zl.proto.Vector3 ArenaHeadPosition = 3;
inline bool PlayerTrackingData::has_arenaheadposition() const {
  return this != internal_default_instance() && arenaheadposition_ != nullptr;
}
inline const ::zl::proto::Vector3& PlayerTrackingData::arenaheadposition() const {
  const ::zl::proto::Vector3* p = arenaheadposition_;
  // @@protoc_insertion_point(field_get:zl.proto.player.PlayerTrackingData.ArenaHeadPosition)
  return p != nullptr ? *p : *reinterpret_cast<const ::zl::proto::Vector3*>(
      &::zl::proto::_Vector3_default_instance_);
}
inline ::zl::proto::Vector3* PlayerTrackingData::release_arenaheadposition() {
  // @@protoc_insertion_point(field_release:zl.proto.player.PlayerTrackingData.ArenaHeadPosition)
  
  ::zl::proto::Vector3* temp = arenaheadposition_;
  arenaheadposition_ = nullptr;
  return temp;
}
inline ::zl::proto::Vector3* PlayerTrackingData::mutable_arenaheadposition() {
  
  if (arenaheadposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::zl::proto::Vector3>(GetArenaNoVirtual());
    arenaheadposition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zl.proto.player.PlayerTrackingData.ArenaHeadPosition)
  return arenaheadposition_;
}
inline void PlayerTrackingData::set_allocated_arenaheadposition(::zl::proto::Vector3* arenaheadposition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(arenaheadposition_);
  }
  if (arenaheadposition) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      arenaheadposition = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, arenaheadposition, submessage_arena);
    }
    
  } else {
    
  }
  arenaheadposition_ = arenaheadposition;
  // @@protoc_insertion_point(field_set_allocated:zl.proto.player.PlayerTrackingData.ArenaHeadPosition)
}

// .zl.proto.Quaternion ArenaHeadOrientation = 4;
inline bool PlayerTrackingData::has_arenaheadorientation() const {
  return this != internal_default_instance() && arenaheadorientation_ != nullptr;
}
inline const ::zl::proto::Quaternion& PlayerTrackingData::arenaheadorientation() const {
  const ::zl::proto::Quaternion* p = arenaheadorientation_;
  // @@protoc_insertion_point(field_get:zl.proto.player.PlayerTrackingData.ArenaHeadOrientation)
  return p != nullptr ? *p : *reinterpret_cast<const ::zl::proto::Quaternion*>(
      &::zl::proto::_Quaternion_default_instance_);
}
inline ::zl::proto::Quaternion* PlayerTrackingData::release_arenaheadorientation() {
  // @@protoc_insertion_point(field_release:zl.proto.player.PlayerTrackingData.ArenaHeadOrientation)
  
  ::zl::proto::Quaternion* temp = arenaheadorientation_;
  arenaheadorientation_ = nullptr;
  return temp;
}
inline ::zl::proto::Quaternion* PlayerTrackingData::mutable_arenaheadorientation() {
  
  if (arenaheadorientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::zl::proto::Quaternion>(GetArenaNoVirtual());
    arenaheadorientation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zl.proto.player.PlayerTrackingData.ArenaHeadOrientation)
  return arenaheadorientation_;
}
inline void PlayerTrackingData::set_allocated_arenaheadorientation(::zl::proto::Quaternion* arenaheadorientation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(arenaheadorientation_);
  }
  if (arenaheadorientation) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      arenaheadorientation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, arenaheadorientation, submessage_arena);
    }
    
  } else {
    
  }
  arenaheadorientation_ = arenaheadorientation;
  // @@protoc_insertion_point(field_set_allocated:zl.proto.player.PlayerTrackingData.ArenaHeadOrientation)
}

// repeated int32 TrackedControllers = 5;
inline int PlayerTrackingData::trackedcontrollers_size() const {
  return trackedcontrollers_.size();
}
inline void PlayerTrackingData::clear_trackedcontrollers() {
  trackedcontrollers_.Clear();
}
inline ::google::protobuf::int32 PlayerTrackingData::trackedcontrollers(int index) const {
  // @@protoc_insertion_point(field_get:zl.proto.player.PlayerTrackingData.TrackedControllers)
  return trackedcontrollers_.Get(index);
}
inline void PlayerTrackingData::set_trackedcontrollers(int index, ::google::protobuf::int32 value) {
  trackedcontrollers_.Set(index, value);
  // @@protoc_insertion_point(field_set:zl.proto.player.PlayerTrackingData.TrackedControllers)
}
inline void PlayerTrackingData::add_trackedcontrollers(::google::protobuf::int32 value) {
  trackedcontrollers_.Add(value);
  // @@protoc_insertion_point(field_add:zl.proto.player.PlayerTrackingData.TrackedControllers)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlayerTrackingData::trackedcontrollers() const {
  // @@protoc_insertion_point(field_list:zl.proto.player.PlayerTrackingData.TrackedControllers)
  return trackedcontrollers_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlayerTrackingData::mutable_trackedcontrollers() {
  // @@protoc_insertion_point(field_mutable_list:zl.proto.player.PlayerTrackingData.TrackedControllers)
  return &trackedcontrollers_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace player
}  // namespace proto
}  // namespace zl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_player_2fPlayerTrackingData_2eproto
