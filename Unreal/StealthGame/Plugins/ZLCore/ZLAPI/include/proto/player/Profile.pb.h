// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player/Profile.proto

#ifndef PROTOBUF_INCLUDED_player_2fProfile_2eproto
#define PROTOBUF_INCLUDED_player_2fProfile_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_player_2fProfile_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_player_2fProfile_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_player_2fProfile_2eproto();
namespace zl {
namespace proto {
namespace player {
class Profile;
class ProfileDefaultTypeInternal;
extern ProfileDefaultTypeInternal _Profile_default_instance_;
}  // namespace player
}  // namespace proto
}  // namespace zl
namespace google {
namespace protobuf {
template<> ::zl::proto::player::Profile* Arena::CreateMaybeMessage<::zl::proto::player::Profile>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace zl {
namespace proto {
namespace player {

enum Profile_EGender {
  Profile_EGender_UNDISCLOSED = 0,
  Profile_EGender_FEMALE = 1,
  Profile_EGender_MALE = 2,
  Profile_EGender_Profile_EGender_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Profile_EGender_Profile_EGender_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Profile_EGender_IsValid(int value);
const Profile_EGender Profile_EGender_EGender_MIN = Profile_EGender_UNDISCLOSED;
const Profile_EGender Profile_EGender_EGender_MAX = Profile_EGender_MALE;
const int Profile_EGender_EGender_ARRAYSIZE = Profile_EGender_EGender_MAX + 1;

const ::google::protobuf::EnumDescriptor* Profile_EGender_descriptor();
inline const ::std::string& Profile_EGender_Name(Profile_EGender value) {
  return ::google::protobuf::internal::NameOfEnum(
    Profile_EGender_descriptor(), value);
}
inline bool Profile_EGender_Parse(
    const ::std::string& name, Profile_EGender* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Profile_EGender>(
    Profile_EGender_descriptor(), name, value);
}
enum Profile_ELanguage {
  Profile_ELanguage_UNKNOWN = 0,
  Profile_ELanguage_ENGLISH = 1,
  Profile_ELanguage_JAPANESE = 2,
  Profile_ELanguage_SPANISH = 3,
  Profile_ELanguage_CHINESE_TRADITIONAL = 4,
  Profile_ELanguage_CHINESE_SIMPLIFIED = 5,
  Profile_ELanguage_KOREAN = 6,
  Profile_ELanguage_CANADIAN_FRENCH = 7,
  Profile_ELanguage_Profile_ELanguage_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Profile_ELanguage_Profile_ELanguage_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Profile_ELanguage_IsValid(int value);
const Profile_ELanguage Profile_ELanguage_ELanguage_MIN = Profile_ELanguage_UNKNOWN;
const Profile_ELanguage Profile_ELanguage_ELanguage_MAX = Profile_ELanguage_CANADIAN_FRENCH;
const int Profile_ELanguage_ELanguage_ARRAYSIZE = Profile_ELanguage_ELanguage_MAX + 1;

const ::google::protobuf::EnumDescriptor* Profile_ELanguage_descriptor();
inline const ::std::string& Profile_ELanguage_Name(Profile_ELanguage value) {
  return ::google::protobuf::internal::NameOfEnum(
    Profile_ELanguage_descriptor(), value);
}
inline bool Profile_ELanguage_Parse(
    const ::std::string& name, Profile_ELanguage* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Profile_ELanguage>(
    Profile_ELanguage_descriptor(), name, value);
}
// ===================================================================

class Profile final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zl.proto.player.Profile) */ {
 public:
  Profile();
  virtual ~Profile();

  Profile(const Profile& from);

  inline Profile& operator=(const Profile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Profile(Profile&& from) noexcept
    : Profile() {
    *this = ::std::move(from);
  }

  inline Profile& operator=(Profile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Profile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Profile* internal_default_instance() {
    return reinterpret_cast<const Profile*>(
               &_Profile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Profile* other);
  friend void swap(Profile& a, Profile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Profile* New() const final {
    return CreateMaybeMessage<Profile>(nullptr);
  }

  Profile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Profile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Profile& from);
  void MergeFrom(const Profile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Profile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Profile_EGender EGender;
  static const EGender UNDISCLOSED =
    Profile_EGender_UNDISCLOSED;
  static const EGender FEMALE =
    Profile_EGender_FEMALE;
  static const EGender MALE =
    Profile_EGender_MALE;
  static inline bool EGender_IsValid(int value) {
    return Profile_EGender_IsValid(value);
  }
  static const EGender EGender_MIN =
    Profile_EGender_EGender_MIN;
  static const EGender EGender_MAX =
    Profile_EGender_EGender_MAX;
  static const int EGender_ARRAYSIZE =
    Profile_EGender_EGender_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EGender_descriptor() {
    return Profile_EGender_descriptor();
  }
  static inline const ::std::string& EGender_Name(EGender value) {
    return Profile_EGender_Name(value);
  }
  static inline bool EGender_Parse(const ::std::string& name,
      EGender* value) {
    return Profile_EGender_Parse(name, value);
  }

  typedef Profile_ELanguage ELanguage;
  static const ELanguage UNKNOWN =
    Profile_ELanguage_UNKNOWN;
  static const ELanguage ENGLISH =
    Profile_ELanguage_ENGLISH;
  static const ELanguage JAPANESE =
    Profile_ELanguage_JAPANESE;
  static const ELanguage SPANISH =
    Profile_ELanguage_SPANISH;
  static const ELanguage CHINESE_TRADITIONAL =
    Profile_ELanguage_CHINESE_TRADITIONAL;
  static const ELanguage CHINESE_SIMPLIFIED =
    Profile_ELanguage_CHINESE_SIMPLIFIED;
  static const ELanguage KOREAN =
    Profile_ELanguage_KOREAN;
  static const ELanguage CANADIAN_FRENCH =
    Profile_ELanguage_CANADIAN_FRENCH;
  static inline bool ELanguage_IsValid(int value) {
    return Profile_ELanguage_IsValid(value);
  }
  static const ELanguage ELanguage_MIN =
    Profile_ELanguage_ELanguage_MIN;
  static const ELanguage ELanguage_MAX =
    Profile_ELanguage_ELanguage_MAX;
  static const int ELanguage_ARRAYSIZE =
    Profile_ELanguage_ELanguage_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ELanguage_descriptor() {
    return Profile_ELanguage_descriptor();
  }
  static inline const ::std::string& ELanguage_Name(ELanguage value) {
    return Profile_ELanguage_Name(value);
  }
  static inline bool ELanguage_Parse(const ::std::string& name,
      ELanguage* value) {
    return Profile_ELanguage_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string FirstName = 2;
  void clear_firstname();
  static const int kFirstNameFieldNumber = 2;
  const ::std::string& firstname() const;
  void set_firstname(const ::std::string& value);
  #if LANG_CXX11
  void set_firstname(::std::string&& value);
  #endif
  void set_firstname(const char* value);
  void set_firstname(const char* value, size_t size);
  ::std::string* mutable_firstname();
  ::std::string* release_firstname();
  void set_allocated_firstname(::std::string* firstname);

  // string LastName = 3;
  void clear_lastname();
  static const int kLastNameFieldNumber = 3;
  const ::std::string& lastname() const;
  void set_lastname(const ::std::string& value);
  #if LANG_CXX11
  void set_lastname(::std::string&& value);
  #endif
  void set_lastname(const char* value);
  void set_lastname(const char* value, size_t size);
  ::std::string* mutable_lastname();
  ::std::string* release_lastname();
  void set_allocated_lastname(::std::string* lastname);

  // string DisplayName = 4;
  void clear_displayname();
  static const int kDisplayNameFieldNumber = 4;
  const ::std::string& displayname() const;
  void set_displayname(const ::std::string& value);
  #if LANG_CXX11
  void set_displayname(::std::string&& value);
  #endif
  void set_displayname(const char* value);
  void set_displayname(const char* value, size_t size);
  ::std::string* mutable_displayname();
  ::std::string* release_displayname();
  void set_allocated_displayname(::std::string* displayname);

  // string FallbackName = 5;
  void clear_fallbackname();
  static const int kFallbackNameFieldNumber = 5;
  const ::std::string& fallbackname() const;
  void set_fallbackname(const ::std::string& value);
  #if LANG_CXX11
  void set_fallbackname(::std::string&& value);
  #endif
  void set_fallbackname(const char* value);
  void set_fallbackname(const char* value, size_t size);
  ::std::string* mutable_fallbackname();
  ::std::string* release_fallbackname();
  void set_allocated_fallbackname(::std::string* fallbackname);

  // int32 PortalId = 1;
  void clear_portalid();
  static const int kPortalIdFieldNumber = 1;
  ::google::protobuf::int32 portalid() const;
  void set_portalid(::google::protobuf::int32 value);

  // float Height = 6;
  void clear_height();
  static const int kHeightFieldNumber = 6;
  float height() const;
  void set_height(float value);

  // bool bLeftHanded = 7;
  void clear_blefthanded();
  static const int kBLeftHandedFieldNumber = 7;
  bool blefthanded() const;
  void set_blefthanded(bool value);

  // .zl.proto.player.Profile.EGender Gender = 8;
  void clear_gender();
  static const int kGenderFieldNumber = 8;
  ::zl::proto::player::Profile_EGender gender() const;
  void set_gender(::zl::proto::player::Profile_EGender value);

  // .zl.proto.player.Profile.ELanguage Language = 9;
  void clear_language();
  static const int kLanguageFieldNumber = 9;
  ::zl::proto::player::Profile_ELanguage language() const;
  void set_language(::zl::proto::player::Profile_ELanguage value);

  // @@protoc_insertion_point(class_scope:zl.proto.player.Profile)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr firstname_;
  ::google::protobuf::internal::ArenaStringPtr lastname_;
  ::google::protobuf::internal::ArenaStringPtr displayname_;
  ::google::protobuf::internal::ArenaStringPtr fallbackname_;
  ::google::protobuf::int32 portalid_;
  float height_;
  bool blefthanded_;
  int gender_;
  int language_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_2fProfile_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Profile

// int32 PortalId = 1;
inline void Profile::clear_portalid() {
  portalid_ = 0;
}
inline ::google::protobuf::int32 Profile::portalid() const {
  // @@protoc_insertion_point(field_get:zl.proto.player.Profile.PortalId)
  return portalid_;
}
inline void Profile::set_portalid(::google::protobuf::int32 value) {
  
  portalid_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.player.Profile.PortalId)
}

// string FirstName = 2;
inline void Profile::clear_firstname() {
  firstname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Profile::firstname() const {
  // @@protoc_insertion_point(field_get:zl.proto.player.Profile.FirstName)
  return firstname_.GetNoArena();
}
inline void Profile::set_firstname(const ::std::string& value) {
  
  firstname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zl.proto.player.Profile.FirstName)
}
#if LANG_CXX11
inline void Profile::set_firstname(::std::string&& value) {
  
  firstname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zl.proto.player.Profile.FirstName)
}
#endif
inline void Profile::set_firstname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  firstname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zl.proto.player.Profile.FirstName)
}
inline void Profile::set_firstname(const char* value, size_t size) {
  
  firstname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zl.proto.player.Profile.FirstName)
}
inline ::std::string* Profile::mutable_firstname() {
  
  // @@protoc_insertion_point(field_mutable:zl.proto.player.Profile.FirstName)
  return firstname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_firstname() {
  // @@protoc_insertion_point(field_release:zl.proto.player.Profile.FirstName)
  
  return firstname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_firstname(::std::string* firstname) {
  if (firstname != nullptr) {
    
  } else {
    
  }
  firstname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firstname);
  // @@protoc_insertion_point(field_set_allocated:zl.proto.player.Profile.FirstName)
}

// string LastName = 3;
inline void Profile::clear_lastname() {
  lastname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Profile::lastname() const {
  // @@protoc_insertion_point(field_get:zl.proto.player.Profile.LastName)
  return lastname_.GetNoArena();
}
inline void Profile::set_lastname(const ::std::string& value) {
  
  lastname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zl.proto.player.Profile.LastName)
}
#if LANG_CXX11
inline void Profile::set_lastname(::std::string&& value) {
  
  lastname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zl.proto.player.Profile.LastName)
}
#endif
inline void Profile::set_lastname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lastname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zl.proto.player.Profile.LastName)
}
inline void Profile::set_lastname(const char* value, size_t size) {
  
  lastname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zl.proto.player.Profile.LastName)
}
inline ::std::string* Profile::mutable_lastname() {
  
  // @@protoc_insertion_point(field_mutable:zl.proto.player.Profile.LastName)
  return lastname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_lastname() {
  // @@protoc_insertion_point(field_release:zl.proto.player.Profile.LastName)
  
  return lastname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_lastname(::std::string* lastname) {
  if (lastname != nullptr) {
    
  } else {
    
  }
  lastname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lastname);
  // @@protoc_insertion_point(field_set_allocated:zl.proto.player.Profile.LastName)
}

// string DisplayName = 4;
inline void Profile::clear_displayname() {
  displayname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Profile::displayname() const {
  // @@protoc_insertion_point(field_get:zl.proto.player.Profile.DisplayName)
  return displayname_.GetNoArena();
}
inline void Profile::set_displayname(const ::std::string& value) {
  
  displayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zl.proto.player.Profile.DisplayName)
}
#if LANG_CXX11
inline void Profile::set_displayname(::std::string&& value) {
  
  displayname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zl.proto.player.Profile.DisplayName)
}
#endif
inline void Profile::set_displayname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  displayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zl.proto.player.Profile.DisplayName)
}
inline void Profile::set_displayname(const char* value, size_t size) {
  
  displayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zl.proto.player.Profile.DisplayName)
}
inline ::std::string* Profile::mutable_displayname() {
  
  // @@protoc_insertion_point(field_mutable:zl.proto.player.Profile.DisplayName)
  return displayname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_displayname() {
  // @@protoc_insertion_point(field_release:zl.proto.player.Profile.DisplayName)
  
  return displayname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_displayname(::std::string* displayname) {
  if (displayname != nullptr) {
    
  } else {
    
  }
  displayname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), displayname);
  // @@protoc_insertion_point(field_set_allocated:zl.proto.player.Profile.DisplayName)
}

// string FallbackName = 5;
inline void Profile::clear_fallbackname() {
  fallbackname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Profile::fallbackname() const {
  // @@protoc_insertion_point(field_get:zl.proto.player.Profile.FallbackName)
  return fallbackname_.GetNoArena();
}
inline void Profile::set_fallbackname(const ::std::string& value) {
  
  fallbackname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zl.proto.player.Profile.FallbackName)
}
#if LANG_CXX11
inline void Profile::set_fallbackname(::std::string&& value) {
  
  fallbackname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zl.proto.player.Profile.FallbackName)
}
#endif
inline void Profile::set_fallbackname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fallbackname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zl.proto.player.Profile.FallbackName)
}
inline void Profile::set_fallbackname(const char* value, size_t size) {
  
  fallbackname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zl.proto.player.Profile.FallbackName)
}
inline ::std::string* Profile::mutable_fallbackname() {
  
  // @@protoc_insertion_point(field_mutable:zl.proto.player.Profile.FallbackName)
  return fallbackname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_fallbackname() {
  // @@protoc_insertion_point(field_release:zl.proto.player.Profile.FallbackName)
  
  return fallbackname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_fallbackname(::std::string* fallbackname) {
  if (fallbackname != nullptr) {
    
  } else {
    
  }
  fallbackname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fallbackname);
  // @@protoc_insertion_point(field_set_allocated:zl.proto.player.Profile.FallbackName)
}

// float Height = 6;
inline void Profile::clear_height() {
  height_ = 0;
}
inline float Profile::height() const {
  // @@protoc_insertion_point(field_get:zl.proto.player.Profile.Height)
  return height_;
}
inline void Profile::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.player.Profile.Height)
}

// bool bLeftHanded = 7;
inline void Profile::clear_blefthanded() {
  blefthanded_ = false;
}
inline bool Profile::blefthanded() const {
  // @@protoc_insertion_point(field_get:zl.proto.player.Profile.bLeftHanded)
  return blefthanded_;
}
inline void Profile::set_blefthanded(bool value) {
  
  blefthanded_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.player.Profile.bLeftHanded)
}

// .zl.proto.player.Profile.EGender Gender = 8;
inline void Profile::clear_gender() {
  gender_ = 0;
}
inline ::zl::proto::player::Profile_EGender Profile::gender() const {
  // @@protoc_insertion_point(field_get:zl.proto.player.Profile.Gender)
  return static_cast< ::zl::proto::player::Profile_EGender >(gender_);
}
inline void Profile::set_gender(::zl::proto::player::Profile_EGender value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.player.Profile.Gender)
}

// .zl.proto.player.Profile.ELanguage Language = 9;
inline void Profile::clear_language() {
  language_ = 0;
}
inline ::zl::proto::player::Profile_ELanguage Profile::language() const {
  // @@protoc_insertion_point(field_get:zl.proto.player.Profile.Language)
  return static_cast< ::zl::proto::player::Profile_ELanguage >(language_);
}
inline void Profile::set_language(::zl::proto::player::Profile_ELanguage value) {
  
  language_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.player.Profile.Language)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace player
}  // namespace proto
}  // namespace zl

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::zl::proto::player::Profile_EGender> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zl::proto::player::Profile_EGender>() {
  return ::zl::proto::player::Profile_EGender_descriptor();
}
template <> struct is_proto_enum< ::zl::proto::player::Profile_ELanguage> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zl::proto::player::Profile_ELanguage>() {
  return ::zl::proto::player::Profile_ELanguage_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_player_2fProfile_2eproto
