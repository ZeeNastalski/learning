// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: launcher/Descriptors.proto

#ifndef PROTOBUF_INCLUDED_launcher_2fDescriptors_2eproto
#define PROTOBUF_INCLUDED_launcher_2fDescriptors_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "launcher/Version.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_launcher_2fDescriptors_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_launcher_2fDescriptors_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_launcher_2fDescriptors_2eproto();
namespace zl {
namespace proto {
namespace launcher {
class ClientDescriptor;
class ClientDescriptorDefaultTypeInternal;
extern ClientDescriptorDefaultTypeInternal _ClientDescriptor_default_instance_;
class ServerDescriptor;
class ServerDescriptorDefaultTypeInternal;
extern ServerDescriptorDefaultTypeInternal _ServerDescriptor_default_instance_;
}  // namespace launcher
}  // namespace proto
}  // namespace zl
namespace google {
namespace protobuf {
template<> ::zl::proto::launcher::ClientDescriptor* Arena::CreateMaybeMessage<::zl::proto::launcher::ClientDescriptor>(Arena*);
template<> ::zl::proto::launcher::ServerDescriptor* Arena::CreateMaybeMessage<::zl::proto::launcher::ServerDescriptor>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace zl {
namespace proto {
namespace launcher {

// ===================================================================

class ServerDescriptor final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zl.proto.launcher.ServerDescriptor) */ {
 public:
  ServerDescriptor();
  virtual ~ServerDescriptor();

  ServerDescriptor(const ServerDescriptor& from);

  inline ServerDescriptor& operator=(const ServerDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerDescriptor(ServerDescriptor&& from) noexcept
    : ServerDescriptor() {
    *this = ::std::move(from);
  }

  inline ServerDescriptor& operator=(ServerDescriptor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ServerDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerDescriptor* internal_default_instance() {
    return reinterpret_cast<const ServerDescriptor*>(
               &_ServerDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ServerDescriptor* other);
  friend void swap(ServerDescriptor& a, ServerDescriptor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerDescriptor* New() const final {
    return CreateMaybeMessage<ServerDescriptor>(nullptr);
  }

  ServerDescriptor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerDescriptor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerDescriptor& from);
  void MergeFrom(const ServerDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerDescriptor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string MachineName = 1;
  void clear_machinename();
  static const int kMachineNameFieldNumber = 1;
  const ::std::string& machinename() const;
  void set_machinename(const ::std::string& value);
  #if LANG_CXX11
  void set_machinename(::std::string&& value);
  #endif
  void set_machinename(const char* value);
  void set_machinename(const char* value, size_t size);
  ::std::string* mutable_machinename();
  ::std::string* release_machinename();
  void set_allocated_machinename(::std::string* machinename);

  // .zl.proto.launcher.Version LauncherVersion = 2;
  bool has_launcherversion() const;
  void clear_launcherversion();
  static const int kLauncherVersionFieldNumber = 2;
  const ::zl::proto::launcher::Version& launcherversion() const;
  ::zl::proto::launcher::Version* release_launcherversion();
  ::zl::proto::launcher::Version* mutable_launcherversion();
  void set_allocated_launcherversion(::zl::proto::launcher::Version* launcherversion);

  // int32 GameSpace = 3;
  void clear_gamespace();
  static const int kGameSpaceFieldNumber = 3;
  ::google::protobuf::int32 gamespace() const;
  void set_gamespace(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zl.proto.launcher.ServerDescriptor)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr machinename_;
  ::zl::proto::launcher::Version* launcherversion_;
  ::google::protobuf::int32 gamespace_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_launcher_2fDescriptors_2eproto;
};
// -------------------------------------------------------------------

class ClientDescriptor final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zl.proto.launcher.ClientDescriptor) */ {
 public:
  ClientDescriptor();
  virtual ~ClientDescriptor();

  ClientDescriptor(const ClientDescriptor& from);

  inline ClientDescriptor& operator=(const ClientDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientDescriptor(ClientDescriptor&& from) noexcept
    : ClientDescriptor() {
    *this = ::std::move(from);
  }

  inline ClientDescriptor& operator=(ClientDescriptor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ClientDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientDescriptor* internal_default_instance() {
    return reinterpret_cast<const ClientDescriptor*>(
               &_ClientDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ClientDescriptor* other);
  friend void swap(ClientDescriptor& a, ClientDescriptor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientDescriptor* New() const final {
    return CreateMaybeMessage<ClientDescriptor>(nullptr);
  }

  ClientDescriptor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClientDescriptor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClientDescriptor& from);
  void MergeFrom(const ClientDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientDescriptor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string MachineName = 1;
  void clear_machinename();
  static const int kMachineNameFieldNumber = 1;
  const ::std::string& machinename() const;
  void set_machinename(const ::std::string& value);
  #if LANG_CXX11
  void set_machinename(::std::string&& value);
  #endif
  void set_machinename(const char* value);
  void set_machinename(const char* value, size_t size);
  ::std::string* mutable_machinename();
  ::std::string* release_machinename();
  void set_allocated_machinename(::std::string* machinename);

  // .zl.proto.launcher.Version LauncherVersion = 2;
  bool has_launcherversion() const;
  void clear_launcherversion();
  static const int kLauncherVersionFieldNumber = 2;
  const ::zl::proto::launcher::Version& launcherversion() const;
  ::zl::proto::launcher::Version* release_launcherversion();
  ::zl::proto::launcher::Version* mutable_launcherversion();
  void set_allocated_launcherversion(::zl::proto::launcher::Version* launcherversion);

  // @@protoc_insertion_point(class_scope:zl.proto.launcher.ClientDescriptor)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr machinename_;
  ::zl::proto::launcher::Version* launcherversion_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_launcher_2fDescriptors_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerDescriptor

// string MachineName = 1;
inline void ServerDescriptor::clear_machinename() {
  machinename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerDescriptor::machinename() const {
  // @@protoc_insertion_point(field_get:zl.proto.launcher.ServerDescriptor.MachineName)
  return machinename_.GetNoArena();
}
inline void ServerDescriptor::set_machinename(const ::std::string& value) {
  
  machinename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zl.proto.launcher.ServerDescriptor.MachineName)
}
#if LANG_CXX11
inline void ServerDescriptor::set_machinename(::std::string&& value) {
  
  machinename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zl.proto.launcher.ServerDescriptor.MachineName)
}
#endif
inline void ServerDescriptor::set_machinename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  machinename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zl.proto.launcher.ServerDescriptor.MachineName)
}
inline void ServerDescriptor::set_machinename(const char* value, size_t size) {
  
  machinename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zl.proto.launcher.ServerDescriptor.MachineName)
}
inline ::std::string* ServerDescriptor::mutable_machinename() {
  
  // @@protoc_insertion_point(field_mutable:zl.proto.launcher.ServerDescriptor.MachineName)
  return machinename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerDescriptor::release_machinename() {
  // @@protoc_insertion_point(field_release:zl.proto.launcher.ServerDescriptor.MachineName)
  
  return machinename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerDescriptor::set_allocated_machinename(::std::string* machinename) {
  if (machinename != nullptr) {
    
  } else {
    
  }
  machinename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machinename);
  // @@protoc_insertion_point(field_set_allocated:zl.proto.launcher.ServerDescriptor.MachineName)
}

// .zl.proto.launcher.Version LauncherVersion = 2;
inline bool ServerDescriptor::has_launcherversion() const {
  return this != internal_default_instance() && launcherversion_ != nullptr;
}
inline const ::zl::proto::launcher::Version& ServerDescriptor::launcherversion() const {
  const ::zl::proto::launcher::Version* p = launcherversion_;
  // @@protoc_insertion_point(field_get:zl.proto.launcher.ServerDescriptor.LauncherVersion)
  return p != nullptr ? *p : *reinterpret_cast<const ::zl::proto::launcher::Version*>(
      &::zl::proto::launcher::_Version_default_instance_);
}
inline ::zl::proto::launcher::Version* ServerDescriptor::release_launcherversion() {
  // @@protoc_insertion_point(field_release:zl.proto.launcher.ServerDescriptor.LauncherVersion)
  
  ::zl::proto::launcher::Version* temp = launcherversion_;
  launcherversion_ = nullptr;
  return temp;
}
inline ::zl::proto::launcher::Version* ServerDescriptor::mutable_launcherversion() {
  
  if (launcherversion_ == nullptr) {
    auto* p = CreateMaybeMessage<::zl::proto::launcher::Version>(GetArenaNoVirtual());
    launcherversion_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zl.proto.launcher.ServerDescriptor.LauncherVersion)
  return launcherversion_;
}
inline void ServerDescriptor::set_allocated_launcherversion(::zl::proto::launcher::Version* launcherversion) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(launcherversion_);
  }
  if (launcherversion) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      launcherversion = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, launcherversion, submessage_arena);
    }
    
  } else {
    
  }
  launcherversion_ = launcherversion;
  // @@protoc_insertion_point(field_set_allocated:zl.proto.launcher.ServerDescriptor.LauncherVersion)
}

// int32 GameSpace = 3;
inline void ServerDescriptor::clear_gamespace() {
  gamespace_ = 0;
}
inline ::google::protobuf::int32 ServerDescriptor::gamespace() const {
  // @@protoc_insertion_point(field_get:zl.proto.launcher.ServerDescriptor.GameSpace)
  return gamespace_;
}
inline void ServerDescriptor::set_gamespace(::google::protobuf::int32 value) {
  
  gamespace_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.launcher.ServerDescriptor.GameSpace)
}

// -------------------------------------------------------------------

// ClientDescriptor

// string MachineName = 1;
inline void ClientDescriptor::clear_machinename() {
  machinename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientDescriptor::machinename() const {
  // @@protoc_insertion_point(field_get:zl.proto.launcher.ClientDescriptor.MachineName)
  return machinename_.GetNoArena();
}
inline void ClientDescriptor::set_machinename(const ::std::string& value) {
  
  machinename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zl.proto.launcher.ClientDescriptor.MachineName)
}
#if LANG_CXX11
inline void ClientDescriptor::set_machinename(::std::string&& value) {
  
  machinename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zl.proto.launcher.ClientDescriptor.MachineName)
}
#endif
inline void ClientDescriptor::set_machinename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  machinename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zl.proto.launcher.ClientDescriptor.MachineName)
}
inline void ClientDescriptor::set_machinename(const char* value, size_t size) {
  
  machinename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zl.proto.launcher.ClientDescriptor.MachineName)
}
inline ::std::string* ClientDescriptor::mutable_machinename() {
  
  // @@protoc_insertion_point(field_mutable:zl.proto.launcher.ClientDescriptor.MachineName)
  return machinename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientDescriptor::release_machinename() {
  // @@protoc_insertion_point(field_release:zl.proto.launcher.ClientDescriptor.MachineName)
  
  return machinename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientDescriptor::set_allocated_machinename(::std::string* machinename) {
  if (machinename != nullptr) {
    
  } else {
    
  }
  machinename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machinename);
  // @@protoc_insertion_point(field_set_allocated:zl.proto.launcher.ClientDescriptor.MachineName)
}

// .zl.proto.launcher.Version LauncherVersion = 2;
inline bool ClientDescriptor::has_launcherversion() const {
  return this != internal_default_instance() && launcherversion_ != nullptr;
}
inline const ::zl::proto::launcher::Version& ClientDescriptor::launcherversion() const {
  const ::zl::proto::launcher::Version* p = launcherversion_;
  // @@protoc_insertion_point(field_get:zl.proto.launcher.ClientDescriptor.LauncherVersion)
  return p != nullptr ? *p : *reinterpret_cast<const ::zl::proto::launcher::Version*>(
      &::zl::proto::launcher::_Version_default_instance_);
}
inline ::zl::proto::launcher::Version* ClientDescriptor::release_launcherversion() {
  // @@protoc_insertion_point(field_release:zl.proto.launcher.ClientDescriptor.LauncherVersion)
  
  ::zl::proto::launcher::Version* temp = launcherversion_;
  launcherversion_ = nullptr;
  return temp;
}
inline ::zl::proto::launcher::Version* ClientDescriptor::mutable_launcherversion() {
  
  if (launcherversion_ == nullptr) {
    auto* p = CreateMaybeMessage<::zl::proto::launcher::Version>(GetArenaNoVirtual());
    launcherversion_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zl.proto.launcher.ClientDescriptor.LauncherVersion)
  return launcherversion_;
}
inline void ClientDescriptor::set_allocated_launcherversion(::zl::proto::launcher::Version* launcherversion) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(launcherversion_);
  }
  if (launcherversion) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      launcherversion = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, launcherversion, submessage_arena);
    }
    
  } else {
    
  }
  launcherversion_ = launcherversion;
  // @@protoc_insertion_point(field_set_allocated:zl.proto.launcher.ClientDescriptor.LauncherVersion)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace launcher
}  // namespace proto
}  // namespace zl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_launcher_2fDescriptors_2eproto
