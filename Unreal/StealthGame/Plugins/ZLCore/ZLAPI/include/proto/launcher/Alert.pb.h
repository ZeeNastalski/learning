// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: launcher/Alert.proto

#ifndef PROTOBUF_INCLUDED_launcher_2fAlert_2eproto
#define PROTOBUF_INCLUDED_launcher_2fAlert_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_launcher_2fAlert_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_launcher_2fAlert_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_launcher_2fAlert_2eproto();
namespace zl {
namespace proto {
namespace launcher {
class Alert;
class AlertDefaultTypeInternal;
extern AlertDefaultTypeInternal _Alert_default_instance_;
}  // namespace launcher
}  // namespace proto
}  // namespace zl
namespace google {
namespace protobuf {
template<> ::zl::proto::launcher::Alert* Arena::CreateMaybeMessage<::zl::proto::launcher::Alert>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace zl {
namespace proto {
namespace launcher {

enum EAlertLevel {
  INFORMATION = 0,
  WARNING = 1,
  ERROR = 2,
  EAlertLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  EAlertLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool EAlertLevel_IsValid(int value);
const EAlertLevel EAlertLevel_MIN = INFORMATION;
const EAlertLevel EAlertLevel_MAX = ERROR;
const int EAlertLevel_ARRAYSIZE = EAlertLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* EAlertLevel_descriptor();
inline const ::std::string& EAlertLevel_Name(EAlertLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    EAlertLevel_descriptor(), value);
}
inline bool EAlertLevel_Parse(
    const ::std::string& name, EAlertLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EAlertLevel>(
    EAlertLevel_descriptor(), name, value);
}
// ===================================================================

class Alert final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zl.proto.launcher.Alert) */ {
 public:
  Alert();
  virtual ~Alert();

  Alert(const Alert& from);

  inline Alert& operator=(const Alert& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Alert(Alert&& from) noexcept
    : Alert() {
    *this = ::std::move(from);
  }

  inline Alert& operator=(Alert&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Alert& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Alert* internal_default_instance() {
    return reinterpret_cast<const Alert*>(
               &_Alert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Alert* other);
  friend void swap(Alert& a, Alert& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Alert* New() const final {
    return CreateMaybeMessage<Alert>(nullptr);
  }

  Alert* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Alert>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Alert& from);
  void MergeFrom(const Alert& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Alert* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // int32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // .zl.proto.launcher.EAlertLevel Level = 3;
  void clear_level();
  static const int kLevelFieldNumber = 3;
  ::zl::proto::launcher::EAlertLevel level() const;
  void set_level(::zl::proto::launcher::EAlertLevel value);

  // int32 EntityId = 4;
  void clear_entityid();
  static const int kEntityIdFieldNumber = 4;
  ::google::protobuf::int32 entityid() const;
  void set_entityid(::google::protobuf::int32 value);

  // bool Reportable = 5;
  void clear_reportable();
  static const int kReportableFieldNumber = 5;
  bool reportable() const;
  void set_reportable(bool value);

  // bool Dismissable = 6;
  void clear_dismissable();
  static const int kDismissableFieldNumber = 6;
  bool dismissable() const;
  void set_dismissable(bool value);

  // @@protoc_insertion_point(class_scope:zl.proto.launcher.Alert)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 id_;
  int level_;
  ::google::protobuf::int32 entityid_;
  bool reportable_;
  bool dismissable_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_launcher_2fAlert_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Alert

// int32 Id = 1;
inline void Alert::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Alert::id() const {
  // @@protoc_insertion_point(field_get:zl.proto.launcher.Alert.Id)
  return id_;
}
inline void Alert::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.launcher.Alert.Id)
}

// string Message = 2;
inline void Alert::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Alert::message() const {
  // @@protoc_insertion_point(field_get:zl.proto.launcher.Alert.Message)
  return message_.GetNoArena();
}
inline void Alert::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zl.proto.launcher.Alert.Message)
}
#if LANG_CXX11
inline void Alert::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zl.proto.launcher.Alert.Message)
}
#endif
inline void Alert::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zl.proto.launcher.Alert.Message)
}
inline void Alert::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zl.proto.launcher.Alert.Message)
}
inline ::std::string* Alert::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:zl.proto.launcher.Alert.Message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Alert::release_message() {
  // @@protoc_insertion_point(field_release:zl.proto.launcher.Alert.Message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Alert::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:zl.proto.launcher.Alert.Message)
}

// .zl.proto.launcher.EAlertLevel Level = 3;
inline void Alert::clear_level() {
  level_ = 0;
}
inline ::zl::proto::launcher::EAlertLevel Alert::level() const {
  // @@protoc_insertion_point(field_get:zl.proto.launcher.Alert.Level)
  return static_cast< ::zl::proto::launcher::EAlertLevel >(level_);
}
inline void Alert::set_level(::zl::proto::launcher::EAlertLevel value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.launcher.Alert.Level)
}

// int32 EntityId = 4;
inline void Alert::clear_entityid() {
  entityid_ = 0;
}
inline ::google::protobuf::int32 Alert::entityid() const {
  // @@protoc_insertion_point(field_get:zl.proto.launcher.Alert.EntityId)
  return entityid_;
}
inline void Alert::set_entityid(::google::protobuf::int32 value) {
  
  entityid_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.launcher.Alert.EntityId)
}

// bool Reportable = 5;
inline void Alert::clear_reportable() {
  reportable_ = false;
}
inline bool Alert::reportable() const {
  // @@protoc_insertion_point(field_get:zl.proto.launcher.Alert.Reportable)
  return reportable_;
}
inline void Alert::set_reportable(bool value) {
  
  reportable_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.launcher.Alert.Reportable)
}

// bool Dismissable = 6;
inline void Alert::clear_dismissable() {
  dismissable_ = false;
}
inline bool Alert::dismissable() const {
  // @@protoc_insertion_point(field_get:zl.proto.launcher.Alert.Dismissable)
  return dismissable_;
}
inline void Alert::set_dismissable(bool value) {
  
  dismissable_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.launcher.Alert.Dismissable)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace launcher
}  // namespace proto
}  // namespace zl

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::zl::proto::launcher::EAlertLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zl::proto::launcher::EAlertLevel>() {
  return ::zl::proto::launcher::EAlertLevel_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_launcher_2fAlert_2eproto
