// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: launcher/GameConfig.proto

#ifndef PROTOBUF_INCLUDED_launcher_2fGameConfig_2eproto
#define PROTOBUF_INCLUDED_launcher_2fGameConfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_launcher_2fGameConfig_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_launcher_2fGameConfig_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_launcher_2fGameConfig_2eproto();
namespace zl {
namespace proto {
namespace launcher {
class GameConfig;
class GameConfigDefaultTypeInternal;
extern GameConfigDefaultTypeInternal _GameConfig_default_instance_;
}  // namespace launcher
}  // namespace proto
}  // namespace zl
namespace google {
namespace protobuf {
template<> ::zl::proto::launcher::GameConfig* Arena::CreateMaybeMessage<::zl::proto::launcher::GameConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace zl {
namespace proto {
namespace launcher {

enum GameConfig_EInputType {
  GameConfig_EInputType_NONE = 0,
  GameConfig_EInputType_GUN = 1,
  GameConfig_EInputType_GameConfig_EInputType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  GameConfig_EInputType_GameConfig_EInputType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool GameConfig_EInputType_IsValid(int value);
const GameConfig_EInputType GameConfig_EInputType_EInputType_MIN = GameConfig_EInputType_NONE;
const GameConfig_EInputType GameConfig_EInputType_EInputType_MAX = GameConfig_EInputType_GUN;
const int GameConfig_EInputType_EInputType_ARRAYSIZE = GameConfig_EInputType_EInputType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameConfig_EInputType_descriptor();
inline const ::std::string& GameConfig_EInputType_Name(GameConfig_EInputType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameConfig_EInputType_descriptor(), value);
}
inline bool GameConfig_EInputType_Parse(
    const ::std::string& name, GameConfig_EInputType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameConfig_EInputType>(
    GameConfig_EInputType_descriptor(), name, value);
}
// ===================================================================

class GameConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zl.proto.launcher.GameConfig) */ {
 public:
  GameConfig();
  virtual ~GameConfig();

  GameConfig(const GameConfig& from);

  inline GameConfig& operator=(const GameConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameConfig(GameConfig&& from) noexcept
    : GameConfig() {
    *this = ::std::move(from);
  }

  inline GameConfig& operator=(GameConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameConfig* internal_default_instance() {
    return reinterpret_cast<const GameConfig*>(
               &_GameConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GameConfig* other);
  friend void swap(GameConfig& a, GameConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameConfig* New() const final {
    return CreateMaybeMessage<GameConfig>(nullptr);
  }

  GameConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameConfig& from);
  void MergeFrom(const GameConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GameConfig_EInputType EInputType;
  static const EInputType NONE =
    GameConfig_EInputType_NONE;
  static const EInputType GUN =
    GameConfig_EInputType_GUN;
  static inline bool EInputType_IsValid(int value) {
    return GameConfig_EInputType_IsValid(value);
  }
  static const EInputType EInputType_MIN =
    GameConfig_EInputType_EInputType_MIN;
  static const EInputType EInputType_MAX =
    GameConfig_EInputType_EInputType_MAX;
  static const int EInputType_ARRAYSIZE =
    GameConfig_EInputType_EInputType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EInputType_descriptor() {
    return GameConfig_EInputType_descriptor();
  }
  static inline const ::std::string& EInputType_Name(EInputType value) {
    return GameConfig_EInputType_Name(value);
  }
  static inline bool EInputType_Parse(const ::std::string& name,
      EInputType* value) {
    return GameConfig_EInputType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string Name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string Alias = 2;
  void clear_alias();
  static const int kAliasFieldNumber = 2;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // string Version = 3;
  void clear_version();
  static const int kVersionFieldNumber = 3;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string ExecutablePath = 4;
  void clear_executablepath();
  static const int kExecutablePathFieldNumber = 4;
  const ::std::string& executablepath() const;
  void set_executablepath(const ::std::string& value);
  #if LANG_CXX11
  void set_executablepath(::std::string&& value);
  #endif
  void set_executablepath(const char* value);
  void set_executablepath(const char* value, size_t size);
  ::std::string* mutable_executablepath();
  ::std::string* release_executablepath();
  void set_allocated_executablepath(::std::string* executablepath);

  // string FullScreenArgs = 5;
  void clear_fullscreenargs();
  static const int kFullScreenArgsFieldNumber = 5;
  const ::std::string& fullscreenargs() const;
  void set_fullscreenargs(const ::std::string& value);
  #if LANG_CXX11
  void set_fullscreenargs(::std::string&& value);
  #endif
  void set_fullscreenargs(const char* value);
  void set_fullscreenargs(const char* value, size_t size);
  ::std::string* mutable_fullscreenargs();
  ::std::string* release_fullscreenargs();
  void set_allocated_fullscreenargs(::std::string* fullscreenargs);

  // string WindowArgs = 6;
  void clear_windowargs();
  static const int kWindowArgsFieldNumber = 6;
  const ::std::string& windowargs() const;
  void set_windowargs(const ::std::string& value);
  #if LANG_CXX11
  void set_windowargs(::std::string&& value);
  #endif
  void set_windowargs(const char* value);
  void set_windowargs(const char* value, size_t size);
  ::std::string* mutable_windowargs();
  ::std::string* release_windowargs();
  void set_allocated_windowargs(::std::string* windowargs);

  // string UnityLogDir = 7;
  void clear_unitylogdir();
  static const int kUnityLogDirFieldNumber = 7;
  const ::std::string& unitylogdir() const;
  void set_unitylogdir(const ::std::string& value);
  #if LANG_CXX11
  void set_unitylogdir(::std::string&& value);
  #endif
  void set_unitylogdir(const char* value);
  void set_unitylogdir(const char* value, size_t size);
  ::std::string* mutable_unitylogdir();
  ::std::string* release_unitylogdir();
  void set_allocated_unitylogdir(::std::string* unitylogdir);

  // string DirectoryOverride = 18;
  void clear_directoryoverride();
  static const int kDirectoryOverrideFieldNumber = 18;
  const ::std::string& directoryoverride() const;
  void set_directoryoverride(const ::std::string& value);
  #if LANG_CXX11
  void set_directoryoverride(::std::string&& value);
  #endif
  void set_directoryoverride(const char* value);
  void set_directoryoverride(const char* value, size_t size);
  ::std::string* mutable_directoryoverride();
  ::std::string* release_directoryoverride();
  void set_allocated_directoryoverride(::std::string* directoryoverride);

  // bool DownloadRequired = 8;
  void clear_downloadrequired();
  static const int kDownloadRequiredFieldNumber = 8;
  bool downloadrequired() const;
  void set_downloadrequired(bool value);

  // bool RollbackAvailable = 9;
  void clear_rollbackavailable();
  static const int kRollbackAvailableFieldNumber = 9;
  bool rollbackavailable() const;
  void set_rollbackavailable(bool value);

  // bool Downloading = 10;
  void clear_downloading();
  static const int kDownloadingFieldNumber = 10;
  bool downloading() const;
  void set_downloading(bool value);

  // bool ClientsideTrackingLoopback = 12;
  void clear_clientsidetrackingloopback();
  static const int kClientsideTrackingLoopbackFieldNumber = 12;
  bool clientsidetrackingloopback() const;
  void set_clientsidetrackingloopback(bool value);

  // int32 Volume = 11;
  void clear_volume();
  static const int kVolumeFieldNumber = 11;
  ::google::protobuf::int32 volume() const;
  void set_volume(::google::protobuf::int32 value);

  // bool SteamVR = 13;
  void clear_steamvr();
  static const int kSteamVRFieldNumber = 13;
  bool steamvr() const;
  void set_steamvr(bool value);

  // bool RunningOnServer = 14;
  void clear_runningonserver();
  static const int kRunningOnServerFieldNumber = 14;
  bool runningonserver() const;
  void set_runningonserver(bool value);

  // bool SystemDumpOnFreeze = 15;
  void clear_systemdumponfreeze();
  static const int kSystemDumpOnFreezeFieldNumber = 15;
  bool systemdumponfreeze() const;
  void set_systemdumponfreeze(bool value);

  // bool SystemDumpOnCrash = 16;
  void clear_systemdumponcrash();
  static const int kSystemDumpOnCrashFieldNumber = 16;
  bool systemdumponcrash() const;
  void set_systemdumponcrash(bool value);

  // .zl.proto.launcher.GameConfig.EInputType Input = 17;
  void clear_input();
  static const int kInputFieldNumber = 17;
  ::zl::proto::launcher::GameConfig_EInputType input() const;
  void set_input(::zl::proto::launcher::GameConfig_EInputType value);

  // bool UsesApi = 19;
  void clear_usesapi();
  static const int kUsesApiFieldNumber = 19;
  bool usesapi() const;
  void set_usesapi(bool value);

  // @@protoc_insertion_point(class_scope:zl.proto.launcher.GameConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr executablepath_;
  ::google::protobuf::internal::ArenaStringPtr fullscreenargs_;
  ::google::protobuf::internal::ArenaStringPtr windowargs_;
  ::google::protobuf::internal::ArenaStringPtr unitylogdir_;
  ::google::protobuf::internal::ArenaStringPtr directoryoverride_;
  bool downloadrequired_;
  bool rollbackavailable_;
  bool downloading_;
  bool clientsidetrackingloopback_;
  ::google::protobuf::int32 volume_;
  bool steamvr_;
  bool runningonserver_;
  bool systemdumponfreeze_;
  bool systemdumponcrash_;
  int input_;
  bool usesapi_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_launcher_2fGameConfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameConfig

// string Name = 1;
inline void GameConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameConfig::name() const {
  // @@protoc_insertion_point(field_get:zl.proto.launcher.GameConfig.Name)
  return name_.GetNoArena();
}
inline void GameConfig::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zl.proto.launcher.GameConfig.Name)
}
#if LANG_CXX11
inline void GameConfig::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zl.proto.launcher.GameConfig.Name)
}
#endif
inline void GameConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zl.proto.launcher.GameConfig.Name)
}
inline void GameConfig::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zl.proto.launcher.GameConfig.Name)
}
inline ::std::string* GameConfig::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:zl.proto.launcher.GameConfig.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameConfig::release_name() {
  // @@protoc_insertion_point(field_release:zl.proto.launcher.GameConfig.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameConfig::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zl.proto.launcher.GameConfig.Name)
}

// string Alias = 2;
inline void GameConfig::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameConfig::alias() const {
  // @@protoc_insertion_point(field_get:zl.proto.launcher.GameConfig.Alias)
  return alias_.GetNoArena();
}
inline void GameConfig::set_alias(const ::std::string& value) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zl.proto.launcher.GameConfig.Alias)
}
#if LANG_CXX11
inline void GameConfig::set_alias(::std::string&& value) {
  
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zl.proto.launcher.GameConfig.Alias)
}
#endif
inline void GameConfig::set_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zl.proto.launcher.GameConfig.Alias)
}
inline void GameConfig::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zl.proto.launcher.GameConfig.Alias)
}
inline ::std::string* GameConfig::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:zl.proto.launcher.GameConfig.Alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameConfig::release_alias() {
  // @@protoc_insertion_point(field_release:zl.proto.launcher.GameConfig.Alias)
  
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameConfig::set_allocated_alias(::std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:zl.proto.launcher.GameConfig.Alias)
}

// string Version = 3;
inline void GameConfig::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameConfig::version() const {
  // @@protoc_insertion_point(field_get:zl.proto.launcher.GameConfig.Version)
  return version_.GetNoArena();
}
inline void GameConfig::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zl.proto.launcher.GameConfig.Version)
}
#if LANG_CXX11
inline void GameConfig::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zl.proto.launcher.GameConfig.Version)
}
#endif
inline void GameConfig::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zl.proto.launcher.GameConfig.Version)
}
inline void GameConfig::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zl.proto.launcher.GameConfig.Version)
}
inline ::std::string* GameConfig::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:zl.proto.launcher.GameConfig.Version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameConfig::release_version() {
  // @@protoc_insertion_point(field_release:zl.proto.launcher.GameConfig.Version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameConfig::set_allocated_version(::std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:zl.proto.launcher.GameConfig.Version)
}

// string ExecutablePath = 4;
inline void GameConfig::clear_executablepath() {
  executablepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameConfig::executablepath() const {
  // @@protoc_insertion_point(field_get:zl.proto.launcher.GameConfig.ExecutablePath)
  return executablepath_.GetNoArena();
}
inline void GameConfig::set_executablepath(const ::std::string& value) {
  
  executablepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zl.proto.launcher.GameConfig.ExecutablePath)
}
#if LANG_CXX11
inline void GameConfig::set_executablepath(::std::string&& value) {
  
  executablepath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zl.proto.launcher.GameConfig.ExecutablePath)
}
#endif
inline void GameConfig::set_executablepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  executablepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zl.proto.launcher.GameConfig.ExecutablePath)
}
inline void GameConfig::set_executablepath(const char* value, size_t size) {
  
  executablepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zl.proto.launcher.GameConfig.ExecutablePath)
}
inline ::std::string* GameConfig::mutable_executablepath() {
  
  // @@protoc_insertion_point(field_mutable:zl.proto.launcher.GameConfig.ExecutablePath)
  return executablepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameConfig::release_executablepath() {
  // @@protoc_insertion_point(field_release:zl.proto.launcher.GameConfig.ExecutablePath)
  
  return executablepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameConfig::set_allocated_executablepath(::std::string* executablepath) {
  if (executablepath != nullptr) {
    
  } else {
    
  }
  executablepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), executablepath);
  // @@protoc_insertion_point(field_set_allocated:zl.proto.launcher.GameConfig.ExecutablePath)
}

// string FullScreenArgs = 5;
inline void GameConfig::clear_fullscreenargs() {
  fullscreenargs_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameConfig::fullscreenargs() const {
  // @@protoc_insertion_point(field_get:zl.proto.launcher.GameConfig.FullScreenArgs)
  return fullscreenargs_.GetNoArena();
}
inline void GameConfig::set_fullscreenargs(const ::std::string& value) {
  
  fullscreenargs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zl.proto.launcher.GameConfig.FullScreenArgs)
}
#if LANG_CXX11
inline void GameConfig::set_fullscreenargs(::std::string&& value) {
  
  fullscreenargs_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zl.proto.launcher.GameConfig.FullScreenArgs)
}
#endif
inline void GameConfig::set_fullscreenargs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fullscreenargs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zl.proto.launcher.GameConfig.FullScreenArgs)
}
inline void GameConfig::set_fullscreenargs(const char* value, size_t size) {
  
  fullscreenargs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zl.proto.launcher.GameConfig.FullScreenArgs)
}
inline ::std::string* GameConfig::mutable_fullscreenargs() {
  
  // @@protoc_insertion_point(field_mutable:zl.proto.launcher.GameConfig.FullScreenArgs)
  return fullscreenargs_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameConfig::release_fullscreenargs() {
  // @@protoc_insertion_point(field_release:zl.proto.launcher.GameConfig.FullScreenArgs)
  
  return fullscreenargs_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameConfig::set_allocated_fullscreenargs(::std::string* fullscreenargs) {
  if (fullscreenargs != nullptr) {
    
  } else {
    
  }
  fullscreenargs_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fullscreenargs);
  // @@protoc_insertion_point(field_set_allocated:zl.proto.launcher.GameConfig.FullScreenArgs)
}

// string WindowArgs = 6;
inline void GameConfig::clear_windowargs() {
  windowargs_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameConfig::windowargs() const {
  // @@protoc_insertion_point(field_get:zl.proto.launcher.GameConfig.WindowArgs)
  return windowargs_.GetNoArena();
}
inline void GameConfig::set_windowargs(const ::std::string& value) {
  
  windowargs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zl.proto.launcher.GameConfig.WindowArgs)
}
#if LANG_CXX11
inline void GameConfig::set_windowargs(::std::string&& value) {
  
  windowargs_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zl.proto.launcher.GameConfig.WindowArgs)
}
#endif
inline void GameConfig::set_windowargs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  windowargs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zl.proto.launcher.GameConfig.WindowArgs)
}
inline void GameConfig::set_windowargs(const char* value, size_t size) {
  
  windowargs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zl.proto.launcher.GameConfig.WindowArgs)
}
inline ::std::string* GameConfig::mutable_windowargs() {
  
  // @@protoc_insertion_point(field_mutable:zl.proto.launcher.GameConfig.WindowArgs)
  return windowargs_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameConfig::release_windowargs() {
  // @@protoc_insertion_point(field_release:zl.proto.launcher.GameConfig.WindowArgs)
  
  return windowargs_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameConfig::set_allocated_windowargs(::std::string* windowargs) {
  if (windowargs != nullptr) {
    
  } else {
    
  }
  windowargs_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), windowargs);
  // @@protoc_insertion_point(field_set_allocated:zl.proto.launcher.GameConfig.WindowArgs)
}

// string UnityLogDir = 7;
inline void GameConfig::clear_unitylogdir() {
  unitylogdir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameConfig::unitylogdir() const {
  // @@protoc_insertion_point(field_get:zl.proto.launcher.GameConfig.UnityLogDir)
  return unitylogdir_.GetNoArena();
}
inline void GameConfig::set_unitylogdir(const ::std::string& value) {
  
  unitylogdir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zl.proto.launcher.GameConfig.UnityLogDir)
}
#if LANG_CXX11
inline void GameConfig::set_unitylogdir(::std::string&& value) {
  
  unitylogdir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zl.proto.launcher.GameConfig.UnityLogDir)
}
#endif
inline void GameConfig::set_unitylogdir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unitylogdir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zl.proto.launcher.GameConfig.UnityLogDir)
}
inline void GameConfig::set_unitylogdir(const char* value, size_t size) {
  
  unitylogdir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zl.proto.launcher.GameConfig.UnityLogDir)
}
inline ::std::string* GameConfig::mutable_unitylogdir() {
  
  // @@protoc_insertion_point(field_mutable:zl.proto.launcher.GameConfig.UnityLogDir)
  return unitylogdir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameConfig::release_unitylogdir() {
  // @@protoc_insertion_point(field_release:zl.proto.launcher.GameConfig.UnityLogDir)
  
  return unitylogdir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameConfig::set_allocated_unitylogdir(::std::string* unitylogdir) {
  if (unitylogdir != nullptr) {
    
  } else {
    
  }
  unitylogdir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unitylogdir);
  // @@protoc_insertion_point(field_set_allocated:zl.proto.launcher.GameConfig.UnityLogDir)
}

// bool DownloadRequired = 8;
inline void GameConfig::clear_downloadrequired() {
  downloadrequired_ = false;
}
inline bool GameConfig::downloadrequired() const {
  // @@protoc_insertion_point(field_get:zl.proto.launcher.GameConfig.DownloadRequired)
  return downloadrequired_;
}
inline void GameConfig::set_downloadrequired(bool value) {
  
  downloadrequired_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.launcher.GameConfig.DownloadRequired)
}

// bool RollbackAvailable = 9;
inline void GameConfig::clear_rollbackavailable() {
  rollbackavailable_ = false;
}
inline bool GameConfig::rollbackavailable() const {
  // @@protoc_insertion_point(field_get:zl.proto.launcher.GameConfig.RollbackAvailable)
  return rollbackavailable_;
}
inline void GameConfig::set_rollbackavailable(bool value) {
  
  rollbackavailable_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.launcher.GameConfig.RollbackAvailable)
}

// bool Downloading = 10;
inline void GameConfig::clear_downloading() {
  downloading_ = false;
}
inline bool GameConfig::downloading() const {
  // @@protoc_insertion_point(field_get:zl.proto.launcher.GameConfig.Downloading)
  return downloading_;
}
inline void GameConfig::set_downloading(bool value) {
  
  downloading_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.launcher.GameConfig.Downloading)
}

// int32 Volume = 11;
inline void GameConfig::clear_volume() {
  volume_ = 0;
}
inline ::google::protobuf::int32 GameConfig::volume() const {
  // @@protoc_insertion_point(field_get:zl.proto.launcher.GameConfig.Volume)
  return volume_;
}
inline void GameConfig::set_volume(::google::protobuf::int32 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.launcher.GameConfig.Volume)
}

// bool ClientsideTrackingLoopback = 12;
inline void GameConfig::clear_clientsidetrackingloopback() {
  clientsidetrackingloopback_ = false;
}
inline bool GameConfig::clientsidetrackingloopback() const {
  // @@protoc_insertion_point(field_get:zl.proto.launcher.GameConfig.ClientsideTrackingLoopback)
  return clientsidetrackingloopback_;
}
inline void GameConfig::set_clientsidetrackingloopback(bool value) {
  
  clientsidetrackingloopback_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.launcher.GameConfig.ClientsideTrackingLoopback)
}

// bool SteamVR = 13;
inline void GameConfig::clear_steamvr() {
  steamvr_ = false;
}
inline bool GameConfig::steamvr() const {
  // @@protoc_insertion_point(field_get:zl.proto.launcher.GameConfig.SteamVR)
  return steamvr_;
}
inline void GameConfig::set_steamvr(bool value) {
  
  steamvr_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.launcher.GameConfig.SteamVR)
}

// bool RunningOnServer = 14;
inline void GameConfig::clear_runningonserver() {
  runningonserver_ = false;
}
inline bool GameConfig::runningonserver() const {
  // @@protoc_insertion_point(field_get:zl.proto.launcher.GameConfig.RunningOnServer)
  return runningonserver_;
}
inline void GameConfig::set_runningonserver(bool value) {
  
  runningonserver_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.launcher.GameConfig.RunningOnServer)
}

// bool SystemDumpOnFreeze = 15;
inline void GameConfig::clear_systemdumponfreeze() {
  systemdumponfreeze_ = false;
}
inline bool GameConfig::systemdumponfreeze() const {
  // @@protoc_insertion_point(field_get:zl.proto.launcher.GameConfig.SystemDumpOnFreeze)
  return systemdumponfreeze_;
}
inline void GameConfig::set_systemdumponfreeze(bool value) {
  
  systemdumponfreeze_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.launcher.GameConfig.SystemDumpOnFreeze)
}

// bool SystemDumpOnCrash = 16;
inline void GameConfig::clear_systemdumponcrash() {
  systemdumponcrash_ = false;
}
inline bool GameConfig::systemdumponcrash() const {
  // @@protoc_insertion_point(field_get:zl.proto.launcher.GameConfig.SystemDumpOnCrash)
  return systemdumponcrash_;
}
inline void GameConfig::set_systemdumponcrash(bool value) {
  
  systemdumponcrash_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.launcher.GameConfig.SystemDumpOnCrash)
}

// .zl.proto.launcher.GameConfig.EInputType Input = 17;
inline void GameConfig::clear_input() {
  input_ = 0;
}
inline ::zl::proto::launcher::GameConfig_EInputType GameConfig::input() const {
  // @@protoc_insertion_point(field_get:zl.proto.launcher.GameConfig.Input)
  return static_cast< ::zl::proto::launcher::GameConfig_EInputType >(input_);
}
inline void GameConfig::set_input(::zl::proto::launcher::GameConfig_EInputType value) {
  
  input_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.launcher.GameConfig.Input)
}

// string DirectoryOverride = 18;
inline void GameConfig::clear_directoryoverride() {
  directoryoverride_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameConfig::directoryoverride() const {
  // @@protoc_insertion_point(field_get:zl.proto.launcher.GameConfig.DirectoryOverride)
  return directoryoverride_.GetNoArena();
}
inline void GameConfig::set_directoryoverride(const ::std::string& value) {
  
  directoryoverride_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zl.proto.launcher.GameConfig.DirectoryOverride)
}
#if LANG_CXX11
inline void GameConfig::set_directoryoverride(::std::string&& value) {
  
  directoryoverride_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zl.proto.launcher.GameConfig.DirectoryOverride)
}
#endif
inline void GameConfig::set_directoryoverride(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  directoryoverride_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zl.proto.launcher.GameConfig.DirectoryOverride)
}
inline void GameConfig::set_directoryoverride(const char* value, size_t size) {
  
  directoryoverride_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zl.proto.launcher.GameConfig.DirectoryOverride)
}
inline ::std::string* GameConfig::mutable_directoryoverride() {
  
  // @@protoc_insertion_point(field_mutable:zl.proto.launcher.GameConfig.DirectoryOverride)
  return directoryoverride_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameConfig::release_directoryoverride() {
  // @@protoc_insertion_point(field_release:zl.proto.launcher.GameConfig.DirectoryOverride)
  
  return directoryoverride_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameConfig::set_allocated_directoryoverride(::std::string* directoryoverride) {
  if (directoryoverride != nullptr) {
    
  } else {
    
  }
  directoryoverride_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), directoryoverride);
  // @@protoc_insertion_point(field_set_allocated:zl.proto.launcher.GameConfig.DirectoryOverride)
}

// bool UsesApi = 19;
inline void GameConfig::clear_usesapi() {
  usesapi_ = false;
}
inline bool GameConfig::usesapi() const {
  // @@protoc_insertion_point(field_get:zl.proto.launcher.GameConfig.UsesApi)
  return usesapi_;
}
inline void GameConfig::set_usesapi(bool value) {
  
  usesapi_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.launcher.GameConfig.UsesApi)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace launcher
}  // namespace proto
}  // namespace zl

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::zl::proto::launcher::GameConfig_EInputType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zl::proto::launcher::GameConfig_EInputType>() {
  return ::zl::proto::launcher::GameConfig_EInputType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_launcher_2fGameConfig_2eproto
