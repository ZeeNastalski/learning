// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameMasterView.proto

#ifndef PROTOBUF_INCLUDED_GameMasterView_2eproto
#define PROTOBUF_INCLUDED_GameMasterView_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GameMasterView_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_GameMasterView_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_GameMasterView_2eproto();
namespace zl {
namespace proto {
class GameMasterRow;
class GameMasterRowDefaultTypeInternal;
extern GameMasterRowDefaultTypeInternal _GameMasterRow_default_instance_;
class GameMasterView;
class GameMasterViewDefaultTypeInternal;
extern GameMasterViewDefaultTypeInternal _GameMasterView_default_instance_;
}  // namespace proto
}  // namespace zl
namespace google {
namespace protobuf {
template<> ::zl::proto::GameMasterRow* Arena::CreateMaybeMessage<::zl::proto::GameMasterRow>(Arena*);
template<> ::zl::proto::GameMasterView* Arena::CreateMaybeMessage<::zl::proto::GameMasterView>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace zl {
namespace proto {

// ===================================================================

class GameMasterRow final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zl.proto.GameMasterRow) */ {
 public:
  GameMasterRow();
  virtual ~GameMasterRow();

  GameMasterRow(const GameMasterRow& from);

  inline GameMasterRow& operator=(const GameMasterRow& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameMasterRow(GameMasterRow&& from) noexcept
    : GameMasterRow() {
    *this = ::std::move(from);
  }

  inline GameMasterRow& operator=(GameMasterRow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameMasterRow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameMasterRow* internal_default_instance() {
    return reinterpret_cast<const GameMasterRow*>(
               &_GameMasterRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GameMasterRow* other);
  friend void swap(GameMasterRow& a, GameMasterRow& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameMasterRow* New() const final {
    return CreateMaybeMessage<GameMasterRow>(nullptr);
  }

  GameMasterRow* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameMasterRow>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameMasterRow& from);
  void MergeFrom(const GameMasterRow& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameMasterRow* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string ViewClientIps = 1;
  int viewclientips_size() const;
  void clear_viewclientips();
  static const int kViewClientIpsFieldNumber = 1;
  const ::std::string& viewclientips(int index) const;
  ::std::string* mutable_viewclientips(int index);
  void set_viewclientips(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_viewclientips(int index, ::std::string&& value);
  #endif
  void set_viewclientips(int index, const char* value);
  void set_viewclientips(int index, const char* value, size_t size);
  ::std::string* add_viewclientips();
  void add_viewclientips(const ::std::string& value);
  #if LANG_CXX11
  void add_viewclientips(::std::string&& value);
  #endif
  void add_viewclientips(const char* value);
  void add_viewclientips(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& viewclientips() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_viewclientips();

  // @@protoc_insertion_point(class_scope:zl.proto.GameMasterRow)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> viewclientips_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameMasterView_2eproto;
};
// -------------------------------------------------------------------

class GameMasterView final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zl.proto.GameMasterView) */ {
 public:
  GameMasterView();
  virtual ~GameMasterView();

  GameMasterView(const GameMasterView& from);

  inline GameMasterView& operator=(const GameMasterView& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameMasterView(GameMasterView&& from) noexcept
    : GameMasterView() {
    *this = ::std::move(from);
  }

  inline GameMasterView& operator=(GameMasterView&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameMasterView& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameMasterView* internal_default_instance() {
    return reinterpret_cast<const GameMasterView*>(
               &_GameMasterView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GameMasterView* other);
  friend void swap(GameMasterView& a, GameMasterView& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameMasterView* New() const final {
    return CreateMaybeMessage<GameMasterView>(nullptr);
  }

  GameMasterView* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameMasterView>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameMasterView& from);
  void MergeFrom(const GameMasterView& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameMasterView* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zl.proto.GameMasterRow Rows = 1;
  int rows_size() const;
  void clear_rows();
  static const int kRowsFieldNumber = 1;
  ::zl::proto::GameMasterRow* mutable_rows(int index);
  ::google::protobuf::RepeatedPtrField< ::zl::proto::GameMasterRow >*
      mutable_rows();
  const ::zl::proto::GameMasterRow& rows(int index) const;
  ::zl::proto::GameMasterRow* add_rows();
  const ::google::protobuf::RepeatedPtrField< ::zl::proto::GameMasterRow >&
      rows() const;

  // @@protoc_insertion_point(class_scope:zl.proto.GameMasterView)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::zl::proto::GameMasterRow > rows_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameMasterView_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameMasterRow

// repeated string ViewClientIps = 1;
inline int GameMasterRow::viewclientips_size() const {
  return viewclientips_.size();
}
inline void GameMasterRow::clear_viewclientips() {
  viewclientips_.Clear();
}
inline const ::std::string& GameMasterRow::viewclientips(int index) const {
  // @@protoc_insertion_point(field_get:zl.proto.GameMasterRow.ViewClientIps)
  return viewclientips_.Get(index);
}
inline ::std::string* GameMasterRow::mutable_viewclientips(int index) {
  // @@protoc_insertion_point(field_mutable:zl.proto.GameMasterRow.ViewClientIps)
  return viewclientips_.Mutable(index);
}
inline void GameMasterRow::set_viewclientips(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zl.proto.GameMasterRow.ViewClientIps)
  viewclientips_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GameMasterRow::set_viewclientips(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zl.proto.GameMasterRow.ViewClientIps)
  viewclientips_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GameMasterRow::set_viewclientips(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  viewclientips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zl.proto.GameMasterRow.ViewClientIps)
}
inline void GameMasterRow::set_viewclientips(int index, const char* value, size_t size) {
  viewclientips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zl.proto.GameMasterRow.ViewClientIps)
}
inline ::std::string* GameMasterRow::add_viewclientips() {
  // @@protoc_insertion_point(field_add_mutable:zl.proto.GameMasterRow.ViewClientIps)
  return viewclientips_.Add();
}
inline void GameMasterRow::add_viewclientips(const ::std::string& value) {
  viewclientips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zl.proto.GameMasterRow.ViewClientIps)
}
#if LANG_CXX11
inline void GameMasterRow::add_viewclientips(::std::string&& value) {
  viewclientips_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zl.proto.GameMasterRow.ViewClientIps)
}
#endif
inline void GameMasterRow::add_viewclientips(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  viewclientips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zl.proto.GameMasterRow.ViewClientIps)
}
inline void GameMasterRow::add_viewclientips(const char* value, size_t size) {
  viewclientips_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zl.proto.GameMasterRow.ViewClientIps)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
GameMasterRow::viewclientips() const {
  // @@protoc_insertion_point(field_list:zl.proto.GameMasterRow.ViewClientIps)
  return viewclientips_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
GameMasterRow::mutable_viewclientips() {
  // @@protoc_insertion_point(field_mutable_list:zl.proto.GameMasterRow.ViewClientIps)
  return &viewclientips_;
}

// -------------------------------------------------------------------

// GameMasterView

// repeated .zl.proto.GameMasterRow Rows = 1;
inline int GameMasterView::rows_size() const {
  return rows_.size();
}
inline void GameMasterView::clear_rows() {
  rows_.Clear();
}
inline ::zl::proto::GameMasterRow* GameMasterView::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:zl.proto.GameMasterView.Rows)
  return rows_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zl::proto::GameMasterRow >*
GameMasterView::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:zl.proto.GameMasterView.Rows)
  return &rows_;
}
inline const ::zl::proto::GameMasterRow& GameMasterView::rows(int index) const {
  // @@protoc_insertion_point(field_get:zl.proto.GameMasterView.Rows)
  return rows_.Get(index);
}
inline ::zl::proto::GameMasterRow* GameMasterView::add_rows() {
  // @@protoc_insertion_point(field_add:zl.proto.GameMasterView.Rows)
  return rows_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zl::proto::GameMasterRow >&
GameMasterView::rows() const {
  // @@protoc_insertion_point(field_list:zl.proto.GameMasterView.Rows)
  return rows_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace zl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_GameMasterView_2eproto
