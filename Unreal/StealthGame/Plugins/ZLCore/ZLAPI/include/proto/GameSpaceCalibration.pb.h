// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameSpaceCalibration.proto

#ifndef PROTOBUF_INCLUDED_GameSpaceCalibration_2eproto
#define PROTOBUF_INCLUDED_GameSpaceCalibration_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Vector2.pb.h"
#include "EContentMap.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GameSpaceCalibration_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_GameSpaceCalibration_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_GameSpaceCalibration_2eproto();
namespace zl {
namespace proto {
class GameSpaceCalibration;
class GameSpaceCalibrationDefaultTypeInternal;
extern GameSpaceCalibrationDefaultTypeInternal _GameSpaceCalibration_default_instance_;
class GameSpaceCalibration_ArenaToTrackingPair;
class GameSpaceCalibration_ArenaToTrackingPairDefaultTypeInternal;
extern GameSpaceCalibration_ArenaToTrackingPairDefaultTypeInternal _GameSpaceCalibration_ArenaToTrackingPair_default_instance_;
}  // namespace proto
}  // namespace zl
namespace google {
namespace protobuf {
template<> ::zl::proto::GameSpaceCalibration* Arena::CreateMaybeMessage<::zl::proto::GameSpaceCalibration>(Arena*);
template<> ::zl::proto::GameSpaceCalibration_ArenaToTrackingPair* Arena::CreateMaybeMessage<::zl::proto::GameSpaceCalibration_ArenaToTrackingPair>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace zl {
namespace proto {

enum ESolutionRating {
  Good = 0,
  Acceptable = 1,
  Poor = 2,
  ESolutionRating_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ESolutionRating_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ESolutionRating_IsValid(int value);
const ESolutionRating ESolutionRating_MIN = Good;
const ESolutionRating ESolutionRating_MAX = Poor;
const int ESolutionRating_ARRAYSIZE = ESolutionRating_MAX + 1;

const ::google::protobuf::EnumDescriptor* ESolutionRating_descriptor();
inline const ::std::string& ESolutionRating_Name(ESolutionRating value) {
  return ::google::protobuf::internal::NameOfEnum(
    ESolutionRating_descriptor(), value);
}
inline bool ESolutionRating_Parse(
    const ::std::string& name, ESolutionRating* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ESolutionRating>(
    ESolutionRating_descriptor(), name, value);
}
// ===================================================================

class GameSpaceCalibration_ArenaToTrackingPair final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zl.proto.GameSpaceCalibration.ArenaToTrackingPair) */ {
 public:
  GameSpaceCalibration_ArenaToTrackingPair();
  virtual ~GameSpaceCalibration_ArenaToTrackingPair();

  GameSpaceCalibration_ArenaToTrackingPair(const GameSpaceCalibration_ArenaToTrackingPair& from);

  inline GameSpaceCalibration_ArenaToTrackingPair& operator=(const GameSpaceCalibration_ArenaToTrackingPair& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameSpaceCalibration_ArenaToTrackingPair(GameSpaceCalibration_ArenaToTrackingPair&& from) noexcept
    : GameSpaceCalibration_ArenaToTrackingPair() {
    *this = ::std::move(from);
  }

  inline GameSpaceCalibration_ArenaToTrackingPair& operator=(GameSpaceCalibration_ArenaToTrackingPair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameSpaceCalibration_ArenaToTrackingPair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameSpaceCalibration_ArenaToTrackingPair* internal_default_instance() {
    return reinterpret_cast<const GameSpaceCalibration_ArenaToTrackingPair*>(
               &_GameSpaceCalibration_ArenaToTrackingPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GameSpaceCalibration_ArenaToTrackingPair* other);
  friend void swap(GameSpaceCalibration_ArenaToTrackingPair& a, GameSpaceCalibration_ArenaToTrackingPair& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameSpaceCalibration_ArenaToTrackingPair* New() const final {
    return CreateMaybeMessage<GameSpaceCalibration_ArenaToTrackingPair>(nullptr);
  }

  GameSpaceCalibration_ArenaToTrackingPair* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameSpaceCalibration_ArenaToTrackingPair>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameSpaceCalibration_ArenaToTrackingPair& from);
  void MergeFrom(const GameSpaceCalibration_ArenaToTrackingPair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameSpaceCalibration_ArenaToTrackingPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .zl.proto.Vector2 Key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::zl::proto::Vector2& key() const;
  ::zl::proto::Vector2* release_key();
  ::zl::proto::Vector2* mutable_key();
  void set_allocated_key(::zl::proto::Vector2* key);

  // .zl.proto.Vector2 Value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::zl::proto::Vector2& value() const;
  ::zl::proto::Vector2* release_value();
  ::zl::proto::Vector2* mutable_value();
  void set_allocated_value(::zl::proto::Vector2* value);

  // @@protoc_insertion_point(class_scope:zl.proto.GameSpaceCalibration.ArenaToTrackingPair)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::zl::proto::Vector2* key_;
  ::zl::proto::Vector2* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameSpaceCalibration_2eproto;
};
// -------------------------------------------------------------------

class GameSpaceCalibration final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zl.proto.GameSpaceCalibration) */ {
 public:
  GameSpaceCalibration();
  virtual ~GameSpaceCalibration();

  GameSpaceCalibration(const GameSpaceCalibration& from);

  inline GameSpaceCalibration& operator=(const GameSpaceCalibration& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameSpaceCalibration(GameSpaceCalibration&& from) noexcept
    : GameSpaceCalibration() {
    *this = ::std::move(from);
  }

  inline GameSpaceCalibration& operator=(GameSpaceCalibration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameSpaceCalibration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameSpaceCalibration* internal_default_instance() {
    return reinterpret_cast<const GameSpaceCalibration*>(
               &_GameSpaceCalibration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GameSpaceCalibration* other);
  friend void swap(GameSpaceCalibration& a, GameSpaceCalibration& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameSpaceCalibration* New() const final {
    return CreateMaybeMessage<GameSpaceCalibration>(nullptr);
  }

  GameSpaceCalibration* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameSpaceCalibration>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameSpaceCalibration& from);
  void MergeFrom(const GameSpaceCalibration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameSpaceCalibration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GameSpaceCalibration_ArenaToTrackingPair ArenaToTrackingPair;

  // accessors -------------------------------------------------------

  // repeated .zl.proto.GameSpaceCalibration.ArenaToTrackingPair ArenaToTracking = 13;
  int arenatotracking_size() const;
  void clear_arenatotracking();
  static const int kArenaToTrackingFieldNumber = 13;
  ::zl::proto::GameSpaceCalibration_ArenaToTrackingPair* mutable_arenatotracking(int index);
  ::google::protobuf::RepeatedPtrField< ::zl::proto::GameSpaceCalibration_ArenaToTrackingPair >*
      mutable_arenatotracking();
  const ::zl::proto::GameSpaceCalibration_ArenaToTrackingPair& arenatotracking(int index) const;
  ::zl::proto::GameSpaceCalibration_ArenaToTrackingPair* add_arenatotracking();
  const ::google::protobuf::RepeatedPtrField< ::zl::proto::GameSpaceCalibration_ArenaToTrackingPair >&
      arenatotracking() const;

  // .zl.proto.Vector2 Scale = 11;
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 11;
  const ::zl::proto::Vector2& scale() const;
  ::zl::proto::Vector2* release_scale();
  ::zl::proto::Vector2* mutable_scale();
  void set_allocated_scale(::zl::proto::Vector2* scale);

  // float M11 = 1;
  void clear_m11();
  static const int kM11FieldNumber = 1;
  float m11() const;
  void set_m11(float value);

  // float M21 = 2;
  void clear_m21();
  static const int kM21FieldNumber = 2;
  float m21() const;
  void set_m21(float value);

  // float M31 = 3;
  void clear_m31();
  static const int kM31FieldNumber = 3;
  float m31() const;
  void set_m31(float value);

  // float M12 = 4;
  void clear_m12();
  static const int kM12FieldNumber = 4;
  float m12() const;
  void set_m12(float value);

  // float M22 = 5;
  void clear_m22();
  static const int kM22FieldNumber = 5;
  float m22() const;
  void set_m22(float value);

  // float M32 = 6;
  void clear_m32();
  static const int kM32FieldNumber = 6;
  float m32() const;
  void set_m32(float value);

  // int64 CreationTime = 8;
  void clear_creationtime();
  static const int kCreationTimeFieldNumber = 8;
  ::google::protobuf::int64 creationtime() const;
  void set_creationtime(::google::protobuf::int64 value);

  // int32 Version = 7;
  void clear_version();
  static const int kVersionFieldNumber = 7;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // float Residual = 9;
  void clear_residual();
  static const int kResidualFieldNumber = 9;
  float residual() const;
  void set_residual(float value);

  // float AverageDistance = 10;
  void clear_averagedistance();
  static const int kAverageDistanceFieldNumber = 10;
  float averagedistance() const;
  void set_averagedistance(float value);

  // float Rotation = 12;
  void clear_rotation();
  static const int kRotationFieldNumber = 12;
  float rotation() const;
  void set_rotation(float value);

  // .zl.proto.ESolutionRating Rating = 14;
  void clear_rating();
  static const int kRatingFieldNumber = 14;
  ::zl::proto::ESolutionRating rating() const;
  void set_rating(::zl::proto::ESolutionRating value);

  // .zl.proto.EContentMap ContentMap = 15;
  void clear_contentmap();
  static const int kContentMapFieldNumber = 15;
  ::zl::proto::EContentMap contentmap() const;
  void set_contentmap(::zl::proto::EContentMap value);

  // int32 SiteId = 16;
  void clear_siteid();
  static const int kSiteIdFieldNumber = 16;
  ::google::protobuf::int32 siteid() const;
  void set_siteid(::google::protobuf::int32 value);

  // int32 MapId = 17;
  void clear_mapid();
  static const int kMapIdFieldNumber = 17;
  ::google::protobuf::int32 mapid() const;
  void set_mapid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zl.proto.GameSpaceCalibration)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::zl::proto::GameSpaceCalibration_ArenaToTrackingPair > arenatotracking_;
  ::zl::proto::Vector2* scale_;
  float m11_;
  float m21_;
  float m31_;
  float m12_;
  float m22_;
  float m32_;
  ::google::protobuf::int64 creationtime_;
  ::google::protobuf::int32 version_;
  float residual_;
  float averagedistance_;
  float rotation_;
  int rating_;
  int contentmap_;
  ::google::protobuf::int32 siteid_;
  ::google::protobuf::int32 mapid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameSpaceCalibration_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameSpaceCalibration_ArenaToTrackingPair

// .zl.proto.Vector2 Key = 1;
inline bool GameSpaceCalibration_ArenaToTrackingPair::has_key() const {
  return this != internal_default_instance() && key_ != nullptr;
}
inline const ::zl::proto::Vector2& GameSpaceCalibration_ArenaToTrackingPair::key() const {
  const ::zl::proto::Vector2* p = key_;
  // @@protoc_insertion_point(field_get:zl.proto.GameSpaceCalibration.ArenaToTrackingPair.Key)
  return p != nullptr ? *p : *reinterpret_cast<const ::zl::proto::Vector2*>(
      &::zl::proto::_Vector2_default_instance_);
}
inline ::zl::proto::Vector2* GameSpaceCalibration_ArenaToTrackingPair::release_key() {
  // @@protoc_insertion_point(field_release:zl.proto.GameSpaceCalibration.ArenaToTrackingPair.Key)
  
  ::zl::proto::Vector2* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::zl::proto::Vector2* GameSpaceCalibration_ArenaToTrackingPair::mutable_key() {
  
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::zl::proto::Vector2>(GetArenaNoVirtual());
    key_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zl.proto.GameSpaceCalibration.ArenaToTrackingPair.Key)
  return key_;
}
inline void GameSpaceCalibration_ArenaToTrackingPair::set_allocated_key(::zl::proto::Vector2* key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(key_);
  }
  if (key) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:zl.proto.GameSpaceCalibration.ArenaToTrackingPair.Key)
}

// .zl.proto.Vector2 Value = 2;
inline bool GameSpaceCalibration_ArenaToTrackingPair::has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline const ::zl::proto::Vector2& GameSpaceCalibration_ArenaToTrackingPair::value() const {
  const ::zl::proto::Vector2* p = value_;
  // @@protoc_insertion_point(field_get:zl.proto.GameSpaceCalibration.ArenaToTrackingPair.Value)
  return p != nullptr ? *p : *reinterpret_cast<const ::zl::proto::Vector2*>(
      &::zl::proto::_Vector2_default_instance_);
}
inline ::zl::proto::Vector2* GameSpaceCalibration_ArenaToTrackingPair::release_value() {
  // @@protoc_insertion_point(field_release:zl.proto.GameSpaceCalibration.ArenaToTrackingPair.Value)
  
  ::zl::proto::Vector2* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::zl::proto::Vector2* GameSpaceCalibration_ArenaToTrackingPair::mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::zl::proto::Vector2>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zl.proto.GameSpaceCalibration.ArenaToTrackingPair.Value)
  return value_;
}
inline void GameSpaceCalibration_ArenaToTrackingPair::set_allocated_value(::zl::proto::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_);
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:zl.proto.GameSpaceCalibration.ArenaToTrackingPair.Value)
}

// -------------------------------------------------------------------

// GameSpaceCalibration

// int32 Version = 7;
inline void GameSpaceCalibration::clear_version() {
  version_ = 0;
}
inline ::google::protobuf::int32 GameSpaceCalibration::version() const {
  // @@protoc_insertion_point(field_get:zl.proto.GameSpaceCalibration.Version)
  return version_;
}
inline void GameSpaceCalibration::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.GameSpaceCalibration.Version)
}

// float M11 = 1;
inline void GameSpaceCalibration::clear_m11() {
  m11_ = 0;
}
inline float GameSpaceCalibration::m11() const {
  // @@protoc_insertion_point(field_get:zl.proto.GameSpaceCalibration.M11)
  return m11_;
}
inline void GameSpaceCalibration::set_m11(float value) {
  
  m11_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.GameSpaceCalibration.M11)
}

// float M21 = 2;
inline void GameSpaceCalibration::clear_m21() {
  m21_ = 0;
}
inline float GameSpaceCalibration::m21() const {
  // @@protoc_insertion_point(field_get:zl.proto.GameSpaceCalibration.M21)
  return m21_;
}
inline void GameSpaceCalibration::set_m21(float value) {
  
  m21_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.GameSpaceCalibration.M21)
}

// float M31 = 3;
inline void GameSpaceCalibration::clear_m31() {
  m31_ = 0;
}
inline float GameSpaceCalibration::m31() const {
  // @@protoc_insertion_point(field_get:zl.proto.GameSpaceCalibration.M31)
  return m31_;
}
inline void GameSpaceCalibration::set_m31(float value) {
  
  m31_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.GameSpaceCalibration.M31)
}

// float M12 = 4;
inline void GameSpaceCalibration::clear_m12() {
  m12_ = 0;
}
inline float GameSpaceCalibration::m12() const {
  // @@protoc_insertion_point(field_get:zl.proto.GameSpaceCalibration.M12)
  return m12_;
}
inline void GameSpaceCalibration::set_m12(float value) {
  
  m12_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.GameSpaceCalibration.M12)
}

// float M22 = 5;
inline void GameSpaceCalibration::clear_m22() {
  m22_ = 0;
}
inline float GameSpaceCalibration::m22() const {
  // @@protoc_insertion_point(field_get:zl.proto.GameSpaceCalibration.M22)
  return m22_;
}
inline void GameSpaceCalibration::set_m22(float value) {
  
  m22_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.GameSpaceCalibration.M22)
}

// float M32 = 6;
inline void GameSpaceCalibration::clear_m32() {
  m32_ = 0;
}
inline float GameSpaceCalibration::m32() const {
  // @@protoc_insertion_point(field_get:zl.proto.GameSpaceCalibration.M32)
  return m32_;
}
inline void GameSpaceCalibration::set_m32(float value) {
  
  m32_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.GameSpaceCalibration.M32)
}

// int64 CreationTime = 8;
inline void GameSpaceCalibration::clear_creationtime() {
  creationtime_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GameSpaceCalibration::creationtime() const {
  // @@protoc_insertion_point(field_get:zl.proto.GameSpaceCalibration.CreationTime)
  return creationtime_;
}
inline void GameSpaceCalibration::set_creationtime(::google::protobuf::int64 value) {
  
  creationtime_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.GameSpaceCalibration.CreationTime)
}

// float Residual = 9;
inline void GameSpaceCalibration::clear_residual() {
  residual_ = 0;
}
inline float GameSpaceCalibration::residual() const {
  // @@protoc_insertion_point(field_get:zl.proto.GameSpaceCalibration.Residual)
  return residual_;
}
inline void GameSpaceCalibration::set_residual(float value) {
  
  residual_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.GameSpaceCalibration.Residual)
}

// float AverageDistance = 10;
inline void GameSpaceCalibration::clear_averagedistance() {
  averagedistance_ = 0;
}
inline float GameSpaceCalibration::averagedistance() const {
  // @@protoc_insertion_point(field_get:zl.proto.GameSpaceCalibration.AverageDistance)
  return averagedistance_;
}
inline void GameSpaceCalibration::set_averagedistance(float value) {
  
  averagedistance_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.GameSpaceCalibration.AverageDistance)
}

// .zl.proto.Vector2 Scale = 11;
inline bool GameSpaceCalibration::has_scale() const {
  return this != internal_default_instance() && scale_ != nullptr;
}
inline const ::zl::proto::Vector2& GameSpaceCalibration::scale() const {
  const ::zl::proto::Vector2* p = scale_;
  // @@protoc_insertion_point(field_get:zl.proto.GameSpaceCalibration.Scale)
  return p != nullptr ? *p : *reinterpret_cast<const ::zl::proto::Vector2*>(
      &::zl::proto::_Vector2_default_instance_);
}
inline ::zl::proto::Vector2* GameSpaceCalibration::release_scale() {
  // @@protoc_insertion_point(field_release:zl.proto.GameSpaceCalibration.Scale)
  
  ::zl::proto::Vector2* temp = scale_;
  scale_ = nullptr;
  return temp;
}
inline ::zl::proto::Vector2* GameSpaceCalibration::mutable_scale() {
  
  if (scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::zl::proto::Vector2>(GetArenaNoVirtual());
    scale_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zl.proto.GameSpaceCalibration.Scale)
  return scale_;
}
inline void GameSpaceCalibration::set_allocated_scale(::zl::proto::Vector2* scale) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(scale_);
  }
  if (scale) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scale = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scale, submessage_arena);
    }
    
  } else {
    
  }
  scale_ = scale;
  // @@protoc_insertion_point(field_set_allocated:zl.proto.GameSpaceCalibration.Scale)
}

// float Rotation = 12;
inline void GameSpaceCalibration::clear_rotation() {
  rotation_ = 0;
}
inline float GameSpaceCalibration::rotation() const {
  // @@protoc_insertion_point(field_get:zl.proto.GameSpaceCalibration.Rotation)
  return rotation_;
}
inline void GameSpaceCalibration::set_rotation(float value) {
  
  rotation_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.GameSpaceCalibration.Rotation)
}

// repeated .zl.proto.GameSpaceCalibration.ArenaToTrackingPair ArenaToTracking = 13;
inline int GameSpaceCalibration::arenatotracking_size() const {
  return arenatotracking_.size();
}
inline void GameSpaceCalibration::clear_arenatotracking() {
  arenatotracking_.Clear();
}
inline ::zl::proto::GameSpaceCalibration_ArenaToTrackingPair* GameSpaceCalibration::mutable_arenatotracking(int index) {
  // @@protoc_insertion_point(field_mutable:zl.proto.GameSpaceCalibration.ArenaToTracking)
  return arenatotracking_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zl::proto::GameSpaceCalibration_ArenaToTrackingPair >*
GameSpaceCalibration::mutable_arenatotracking() {
  // @@protoc_insertion_point(field_mutable_list:zl.proto.GameSpaceCalibration.ArenaToTracking)
  return &arenatotracking_;
}
inline const ::zl::proto::GameSpaceCalibration_ArenaToTrackingPair& GameSpaceCalibration::arenatotracking(int index) const {
  // @@protoc_insertion_point(field_get:zl.proto.GameSpaceCalibration.ArenaToTracking)
  return arenatotracking_.Get(index);
}
inline ::zl::proto::GameSpaceCalibration_ArenaToTrackingPair* GameSpaceCalibration::add_arenatotracking() {
  // @@protoc_insertion_point(field_add:zl.proto.GameSpaceCalibration.ArenaToTracking)
  return arenatotracking_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zl::proto::GameSpaceCalibration_ArenaToTrackingPair >&
GameSpaceCalibration::arenatotracking() const {
  // @@protoc_insertion_point(field_list:zl.proto.GameSpaceCalibration.ArenaToTracking)
  return arenatotracking_;
}

// .zl.proto.ESolutionRating Rating = 14;
inline void GameSpaceCalibration::clear_rating() {
  rating_ = 0;
}
inline ::zl::proto::ESolutionRating GameSpaceCalibration::rating() const {
  // @@protoc_insertion_point(field_get:zl.proto.GameSpaceCalibration.Rating)
  return static_cast< ::zl::proto::ESolutionRating >(rating_);
}
inline void GameSpaceCalibration::set_rating(::zl::proto::ESolutionRating value) {
  
  rating_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.GameSpaceCalibration.Rating)
}

// .zl.proto.EContentMap ContentMap = 15;
inline void GameSpaceCalibration::clear_contentmap() {
  contentmap_ = 0;
}
inline ::zl::proto::EContentMap GameSpaceCalibration::contentmap() const {
  // @@protoc_insertion_point(field_get:zl.proto.GameSpaceCalibration.ContentMap)
  return static_cast< ::zl::proto::EContentMap >(contentmap_);
}
inline void GameSpaceCalibration::set_contentmap(::zl::proto::EContentMap value) {
  
  contentmap_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.GameSpaceCalibration.ContentMap)
}

// int32 SiteId = 16;
inline void GameSpaceCalibration::clear_siteid() {
  siteid_ = 0;
}
inline ::google::protobuf::int32 GameSpaceCalibration::siteid() const {
  // @@protoc_insertion_point(field_get:zl.proto.GameSpaceCalibration.SiteId)
  return siteid_;
}
inline void GameSpaceCalibration::set_siteid(::google::protobuf::int32 value) {
  
  siteid_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.GameSpaceCalibration.SiteId)
}

// int32 MapId = 17;
inline void GameSpaceCalibration::clear_mapid() {
  mapid_ = 0;
}
inline ::google::protobuf::int32 GameSpaceCalibration::mapid() const {
  // @@protoc_insertion_point(field_get:zl.proto.GameSpaceCalibration.MapId)
  return mapid_;
}
inline void GameSpaceCalibration::set_mapid(::google::protobuf::int32 value) {
  
  mapid_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.GameSpaceCalibration.MapId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace zl

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::zl::proto::ESolutionRating> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zl::proto::ESolutionRating>() {
  return ::zl::proto::ESolutionRating_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_GameSpaceCalibration_2eproto
