// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BackpackStatus.proto

#ifndef PROTOBUF_INCLUDED_BackpackStatus_2eproto
#define PROTOBUF_INCLUDED_BackpackStatus_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Vector3.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_BackpackStatus_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_BackpackStatus_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_BackpackStatus_2eproto();
namespace zl {
namespace proto {
class BackpackStatus;
class BackpackStatusDefaultTypeInternal;
extern BackpackStatusDefaultTypeInternal _BackpackStatus_default_instance_;
}  // namespace proto
}  // namespace zl
namespace google {
namespace protobuf {
template<> ::zl::proto::BackpackStatus* Arena::CreateMaybeMessage<::zl::proto::BackpackStatus>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace zl {
namespace proto {

// ===================================================================

class BackpackStatus final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zl.proto.BackpackStatus) */ {
 public:
  BackpackStatus();
  virtual ~BackpackStatus();

  BackpackStatus(const BackpackStatus& from);

  inline BackpackStatus& operator=(const BackpackStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BackpackStatus(BackpackStatus&& from) noexcept
    : BackpackStatus() {
    *this = ::std::move(from);
  }

  inline BackpackStatus& operator=(BackpackStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BackpackStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BackpackStatus* internal_default_instance() {
    return reinterpret_cast<const BackpackStatus*>(
               &_BackpackStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(BackpackStatus* other);
  friend void swap(BackpackStatus& a, BackpackStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BackpackStatus* New() const final {
    return CreateMaybeMessage<BackpackStatus>(nullptr);
  }

  BackpackStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BackpackStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BackpackStatus& from);
  void MergeFrom(const BackpackStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BackpackStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .zl.proto.Vector3 RightControllerEulerAngleOffset = 2;
  bool has_rightcontrollereulerangleoffset() const;
  void clear_rightcontrollereulerangleoffset();
  static const int kRightControllerEulerAngleOffsetFieldNumber = 2;
  const ::zl::proto::Vector3& rightcontrollereulerangleoffset() const;
  ::zl::proto::Vector3* release_rightcontrollereulerangleoffset();
  ::zl::proto::Vector3* mutable_rightcontrollereulerangleoffset();
  void set_allocated_rightcontrollereulerangleoffset(::zl::proto::Vector3* rightcontrollereulerangleoffset);

  // .zl.proto.Vector3 RightControllerTranslationOffset = 3;
  bool has_rightcontrollertranslationoffset() const;
  void clear_rightcontrollertranslationoffset();
  static const int kRightControllerTranslationOffsetFieldNumber = 3;
  const ::zl::proto::Vector3& rightcontrollertranslationoffset() const;
  ::zl::proto::Vector3* release_rightcontrollertranslationoffset();
  ::zl::proto::Vector3* mutable_rightcontrollertranslationoffset();
  void set_allocated_rightcontrollertranslationoffset(::zl::proto::Vector3* rightcontrollertranslationoffset);

  // .zl.proto.Vector3 LeftControllerEulerAngleOffset = 4;
  bool has_leftcontrollereulerangleoffset() const;
  void clear_leftcontrollereulerangleoffset();
  static const int kLeftControllerEulerAngleOffsetFieldNumber = 4;
  const ::zl::proto::Vector3& leftcontrollereulerangleoffset() const;
  ::zl::proto::Vector3* release_leftcontrollereulerangleoffset();
  ::zl::proto::Vector3* mutable_leftcontrollereulerangleoffset();
  void set_allocated_leftcontrollereulerangleoffset(::zl::proto::Vector3* leftcontrollereulerangleoffset);

  // .zl.proto.Vector3 LeftControllerTranslationOffset = 5;
  bool has_leftcontrollertranslationoffset() const;
  void clear_leftcontrollertranslationoffset();
  static const int kLeftControllerTranslationOffsetFieldNumber = 5;
  const ::zl::proto::Vector3& leftcontrollertranslationoffset() const;
  ::zl::proto::Vector3* release_leftcontrollertranslationoffset();
  ::zl::proto::Vector3* mutable_leftcontrollertranslationoffset();
  void set_allocated_leftcontrollertranslationoffset(::zl::proto::Vector3* leftcontrollertranslationoffset);

  // bool TrackingOk = 1;
  void clear_trackingok();
  static const int kTrackingOkFieldNumber = 1;
  bool trackingok() const;
  void set_trackingok(bool value);

  // bool IsControllerHybrid = 6;
  void clear_iscontrollerhybrid();
  static const int kIsControllerHybridFieldNumber = 6;
  bool iscontrollerhybrid() const;
  void set_iscontrollerhybrid(bool value);

  // @@protoc_insertion_point(class_scope:zl.proto.BackpackStatus)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::zl::proto::Vector3* rightcontrollereulerangleoffset_;
  ::zl::proto::Vector3* rightcontrollertranslationoffset_;
  ::zl::proto::Vector3* leftcontrollereulerangleoffset_;
  ::zl::proto::Vector3* leftcontrollertranslationoffset_;
  bool trackingok_;
  bool iscontrollerhybrid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BackpackStatus_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BackpackStatus

// bool TrackingOk = 1;
inline void BackpackStatus::clear_trackingok() {
  trackingok_ = false;
}
inline bool BackpackStatus::trackingok() const {
  // @@protoc_insertion_point(field_get:zl.proto.BackpackStatus.TrackingOk)
  return trackingok_;
}
inline void BackpackStatus::set_trackingok(bool value) {
  
  trackingok_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.BackpackStatus.TrackingOk)
}

// .zl.proto.Vector3 RightControllerEulerAngleOffset = 2;
inline bool BackpackStatus::has_rightcontrollereulerangleoffset() const {
  return this != internal_default_instance() && rightcontrollereulerangleoffset_ != nullptr;
}
inline const ::zl::proto::Vector3& BackpackStatus::rightcontrollereulerangleoffset() const {
  const ::zl::proto::Vector3* p = rightcontrollereulerangleoffset_;
  // @@protoc_insertion_point(field_get:zl.proto.BackpackStatus.RightControllerEulerAngleOffset)
  return p != nullptr ? *p : *reinterpret_cast<const ::zl::proto::Vector3*>(
      &::zl::proto::_Vector3_default_instance_);
}
inline ::zl::proto::Vector3* BackpackStatus::release_rightcontrollereulerangleoffset() {
  // @@protoc_insertion_point(field_release:zl.proto.BackpackStatus.RightControllerEulerAngleOffset)
  
  ::zl::proto::Vector3* temp = rightcontrollereulerangleoffset_;
  rightcontrollereulerangleoffset_ = nullptr;
  return temp;
}
inline ::zl::proto::Vector3* BackpackStatus::mutable_rightcontrollereulerangleoffset() {
  
  if (rightcontrollereulerangleoffset_ == nullptr) {
    auto* p = CreateMaybeMessage<::zl::proto::Vector3>(GetArenaNoVirtual());
    rightcontrollereulerangleoffset_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zl.proto.BackpackStatus.RightControllerEulerAngleOffset)
  return rightcontrollereulerangleoffset_;
}
inline void BackpackStatus::set_allocated_rightcontrollereulerangleoffset(::zl::proto::Vector3* rightcontrollereulerangleoffset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rightcontrollereulerangleoffset_);
  }
  if (rightcontrollereulerangleoffset) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rightcontrollereulerangleoffset = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rightcontrollereulerangleoffset, submessage_arena);
    }
    
  } else {
    
  }
  rightcontrollereulerangleoffset_ = rightcontrollereulerangleoffset;
  // @@protoc_insertion_point(field_set_allocated:zl.proto.BackpackStatus.RightControllerEulerAngleOffset)
}

// .zl.proto.Vector3 RightControllerTranslationOffset = 3;
inline bool BackpackStatus::has_rightcontrollertranslationoffset() const {
  return this != internal_default_instance() && rightcontrollertranslationoffset_ != nullptr;
}
inline const ::zl::proto::Vector3& BackpackStatus::rightcontrollertranslationoffset() const {
  const ::zl::proto::Vector3* p = rightcontrollertranslationoffset_;
  // @@protoc_insertion_point(field_get:zl.proto.BackpackStatus.RightControllerTranslationOffset)
  return p != nullptr ? *p : *reinterpret_cast<const ::zl::proto::Vector3*>(
      &::zl::proto::_Vector3_default_instance_);
}
inline ::zl::proto::Vector3* BackpackStatus::release_rightcontrollertranslationoffset() {
  // @@protoc_insertion_point(field_release:zl.proto.BackpackStatus.RightControllerTranslationOffset)
  
  ::zl::proto::Vector3* temp = rightcontrollertranslationoffset_;
  rightcontrollertranslationoffset_ = nullptr;
  return temp;
}
inline ::zl::proto::Vector3* BackpackStatus::mutable_rightcontrollertranslationoffset() {
  
  if (rightcontrollertranslationoffset_ == nullptr) {
    auto* p = CreateMaybeMessage<::zl::proto::Vector3>(GetArenaNoVirtual());
    rightcontrollertranslationoffset_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zl.proto.BackpackStatus.RightControllerTranslationOffset)
  return rightcontrollertranslationoffset_;
}
inline void BackpackStatus::set_allocated_rightcontrollertranslationoffset(::zl::proto::Vector3* rightcontrollertranslationoffset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rightcontrollertranslationoffset_);
  }
  if (rightcontrollertranslationoffset) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rightcontrollertranslationoffset = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rightcontrollertranslationoffset, submessage_arena);
    }
    
  } else {
    
  }
  rightcontrollertranslationoffset_ = rightcontrollertranslationoffset;
  // @@protoc_insertion_point(field_set_allocated:zl.proto.BackpackStatus.RightControllerTranslationOffset)
}

// .zl.proto.Vector3 LeftControllerEulerAngleOffset = 4;
inline bool BackpackStatus::has_leftcontrollereulerangleoffset() const {
  return this != internal_default_instance() && leftcontrollereulerangleoffset_ != nullptr;
}
inline const ::zl::proto::Vector3& BackpackStatus::leftcontrollereulerangleoffset() const {
  const ::zl::proto::Vector3* p = leftcontrollereulerangleoffset_;
  // @@protoc_insertion_point(field_get:zl.proto.BackpackStatus.LeftControllerEulerAngleOffset)
  return p != nullptr ? *p : *reinterpret_cast<const ::zl::proto::Vector3*>(
      &::zl::proto::_Vector3_default_instance_);
}
inline ::zl::proto::Vector3* BackpackStatus::release_leftcontrollereulerangleoffset() {
  // @@protoc_insertion_point(field_release:zl.proto.BackpackStatus.LeftControllerEulerAngleOffset)
  
  ::zl::proto::Vector3* temp = leftcontrollereulerangleoffset_;
  leftcontrollereulerangleoffset_ = nullptr;
  return temp;
}
inline ::zl::proto::Vector3* BackpackStatus::mutable_leftcontrollereulerangleoffset() {
  
  if (leftcontrollereulerangleoffset_ == nullptr) {
    auto* p = CreateMaybeMessage<::zl::proto::Vector3>(GetArenaNoVirtual());
    leftcontrollereulerangleoffset_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zl.proto.BackpackStatus.LeftControllerEulerAngleOffset)
  return leftcontrollereulerangleoffset_;
}
inline void BackpackStatus::set_allocated_leftcontrollereulerangleoffset(::zl::proto::Vector3* leftcontrollereulerangleoffset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(leftcontrollereulerangleoffset_);
  }
  if (leftcontrollereulerangleoffset) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      leftcontrollereulerangleoffset = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, leftcontrollereulerangleoffset, submessage_arena);
    }
    
  } else {
    
  }
  leftcontrollereulerangleoffset_ = leftcontrollereulerangleoffset;
  // @@protoc_insertion_point(field_set_allocated:zl.proto.BackpackStatus.LeftControllerEulerAngleOffset)
}

// .zl.proto.Vector3 LeftControllerTranslationOffset = 5;
inline bool BackpackStatus::has_leftcontrollertranslationoffset() const {
  return this != internal_default_instance() && leftcontrollertranslationoffset_ != nullptr;
}
inline const ::zl::proto::Vector3& BackpackStatus::leftcontrollertranslationoffset() const {
  const ::zl::proto::Vector3* p = leftcontrollertranslationoffset_;
  // @@protoc_insertion_point(field_get:zl.proto.BackpackStatus.LeftControllerTranslationOffset)
  return p != nullptr ? *p : *reinterpret_cast<const ::zl::proto::Vector3*>(
      &::zl::proto::_Vector3_default_instance_);
}
inline ::zl::proto::Vector3* BackpackStatus::release_leftcontrollertranslationoffset() {
  // @@protoc_insertion_point(field_release:zl.proto.BackpackStatus.LeftControllerTranslationOffset)
  
  ::zl::proto::Vector3* temp = leftcontrollertranslationoffset_;
  leftcontrollertranslationoffset_ = nullptr;
  return temp;
}
inline ::zl::proto::Vector3* BackpackStatus::mutable_leftcontrollertranslationoffset() {
  
  if (leftcontrollertranslationoffset_ == nullptr) {
    auto* p = CreateMaybeMessage<::zl::proto::Vector3>(GetArenaNoVirtual());
    leftcontrollertranslationoffset_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zl.proto.BackpackStatus.LeftControllerTranslationOffset)
  return leftcontrollertranslationoffset_;
}
inline void BackpackStatus::set_allocated_leftcontrollertranslationoffset(::zl::proto::Vector3* leftcontrollertranslationoffset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(leftcontrollertranslationoffset_);
  }
  if (leftcontrollertranslationoffset) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      leftcontrollertranslationoffset = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, leftcontrollertranslationoffset, submessage_arena);
    }
    
  } else {
    
  }
  leftcontrollertranslationoffset_ = leftcontrollertranslationoffset;
  // @@protoc_insertion_point(field_set_allocated:zl.proto.BackpackStatus.LeftControllerTranslationOffset)
}

// bool IsControllerHybrid = 6;
inline void BackpackStatus::clear_iscontrollerhybrid() {
  iscontrollerhybrid_ = false;
}
inline bool BackpackStatus::iscontrollerhybrid() const {
  // @@protoc_insertion_point(field_get:zl.proto.BackpackStatus.IsControllerHybrid)
  return iscontrollerhybrid_;
}
inline void BackpackStatus::set_iscontrollerhybrid(bool value) {
  
  iscontrollerhybrid_ = value;
  // @@protoc_insertion_point(field_set:zl.proto.BackpackStatus.IsControllerHybrid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace zl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_BackpackStatus_2eproto
